[{"/mnt/c/Code/resume_builder/rb_frontend/src/index.js":"1","/mnt/c/Code/resume_builder/rb_frontend/src/login/Login.js":"2","/mnt/c/Code/resume_builder/rb_frontend/src/util.js":"3","/mnt/c/Code/resume_builder/rb_frontend/src/ResumeBuilder.js":"4","/mnt/c/Code/resume_builder/rb_frontend/src/resumes/ResumePage.js":"5","/mnt/c/Code/resume_builder/rb_frontend/src/add-history/HistoryPage.js":"6","/mnt/c/Code/resume_builder/rb_frontend/src/add-history/components.js":"7","/mnt/c/Code/resume_builder/rb_frontend/src/Config.js":"8","/mnt/c/Code/resume_builder/rb_frontend/src/common/Section.js":"9","/mnt/c/Code/resume_builder/rb_frontend/src/common/Icons.js":"10","/mnt/c/Code/resume_builder/rb_frontend/src/resumes/templates/Zhong.js":"11","/mnt/c/Code/resume_builder/rb_frontend/src/common/DB.js":"12","/mnt/c/Code/resume_builder/rb_frontend/src/common/util.js":"13"},{"size":239,"mtime":1612419422303,"results":"14","hashOfConfig":"15"},{"size":7900,"mtime":1613987412553,"results":"16","hashOfConfig":"15"},{"size":1004,"mtime":1612428336101,"results":"17","hashOfConfig":"15"},{"size":6584,"mtime":1613986748746,"results":"18","hashOfConfig":"15"},{"size":15038,"mtime":1613971819755,"results":"19","hashOfConfig":"15"},{"size":47001,"mtime":1613986194445,"results":"20","hashOfConfig":"15"},{"size":7558,"mtime":1613398658629,"results":"21","hashOfConfig":"15"},{"size":97,"mtime":1613287670608,"results":"22","hashOfConfig":"15"},{"size":1634,"mtime":1613986269593,"results":"23","hashOfConfig":"15"},{"size":2820,"mtime":1613386005645,"results":"24","hashOfConfig":"15"},{"size":69035,"mtime":1613840829792,"results":"25","hashOfConfig":"15"},{"size":4359,"mtime":1613987235049,"results":"26","hashOfConfig":"15"},{"size":1101,"mtime":1613722664989,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"wo89w9",{"filePath":"31","messages":"32","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"/mnt/c/Code/resume_builder/rb_frontend/src/index.js",[],["58","59"],"/mnt/c/Code/resume_builder/rb_frontend/src/login/Login.js",["60","61","62","63","64"],"/mnt/c/Code/resume_builder/rb_frontend/src/util.js",[],"/mnt/c/Code/resume_builder/rb_frontend/src/ResumeBuilder.js",["65"],"/mnt/c/Code/resume_builder/rb_frontend/src/resumes/ResumePage.js",["66","67","68","69"],"import React from 'react';\nimport {Form,Modal,Button,Jumbotron} from 'react-bootstrap'\n\nimport {SectionBody} from '../common/Section'\n\nimport {TemplateZhong, Composer} from './templates/Zhong';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './resumepage.css';\nimport '../add-history/historypage.css';\n\nimport {} from 'react-bootstrap';\n\nimport {delete_icon,download,edit_icon,done_icon} from '../common/Icons';\nimport {DBEndpoint,globalCache} from '../common/DB'\n\n\nclass ConfirmModal extends React.Component {\n    // @prop: show : boolen\n    // @prop: message : text to display\n    // @prop: onCancel : call back on cancel\n    // @prop: onConfirm : call back on confirm\n    constructor(props){\n        super(props);\n    }\n    render(){\n        return (\n            <Modal show={this.props.show} onHide={()=>this.props.onCancel}>\n                <Modal.Header>\n                    <Modal.Title>{this.props.message}</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>Are you sure?</Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={this.props.onConfirm}>\n                        Confirm\n                    </Button>\n                    <Button variant=\"primary\" onClick={this.props.onCancel}>\n                        Cancel\n                    </Button>\n                    </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n\nclass ResumeItem extends React.Component {\n    // @props: onChange: callback for when a resume item changes:\n    //                 : Param: obj {id,title,job_profile_fk, profile_summary_fk}\n    constructor(props){\n        super(props);\n\n        this.state = {\n            id : props.id,\n            title : props.title,\n            job_profile_fk : props.job_profile_fk,\n            profile_summary_fk : props.profile_summary_fk,\n            jp_options : props.jp_options,\n            ps_options : props.ps_options,\n            show_delete_modal: false,\n        }\n\n        this.dispRef = React.createRef();\n        this.formRef = React.createRef();\n        \n        this.onEdit = this.onEdit.bind(this);\n        this.onSave = this.onSave.bind(this);\n        this.onDeleteCancel = this.onDeleteCancel.bind(this);\n        this.onDeleteConfirm = this.onDeleteConfirm.bind(this);\n\n        this.prevState = null;\n    }\n\n    onDeleteCancel(){\n        this.setState({show_delete_modal:false});\n    }\n    onDeleteConfirm(){\n        this.setState({show_delete_modal:false});\n        this.props.onDelete(this.state.id);\n    }\n\n    onEdit(){\n        this.dispRef.current.style.display='None';\n        this.formRef.current.style.display='';\n        this.prevState = { \n            id : this.state.id ,\n            title : this.state.title, \n            job_profile_fk : this.state.job_profile_fk,\n            profile_summary_fk : this.state.profile_summary_fk        \n        }\n    }\n\n    onSave(){\n        this.formRef.current.style.display='None'; \n        this.dispRef.current.style.display='';\n        for(var key in this.prevState){\n            if(this.state[key] !== this.prevState[key]){\n                this.props.onChange({\n                    id : this.state.id ,\n                    title : this.state.title, \n                    job_profile_fk : this.state.job_profile_fk,\n                    profile_summary_fk : this.state.profile_summary_fk\n                });\n                this.prevState = null;\n                return;\n            }\n        }\n\n    }\n\n    componentDidMount(){\n        this.formRef.current.style.display='None'; \n        this.dispRef.current.style.display='';\n    }\n\n\n    render(){\n        var main = (\n            <div className=\"row\" ref={this.dispRef}>\n                <div className=\"col-10 nopadding text-wrap\">\n                    <div className=\"section-content\">\n                        <div className=\"job-profile\">\n                            <div className=\"profile-name\">\n                                <span>{this.state.title}</span>\n                                <span onClick={this.onEdit}>{edit_icon}</span>\n                            </div>                            \n                        </div>\n                    </div>\n                </div>\n                <div className=\"col-2 nopadding\">\n                    <div className=\"delete-button\" onClick={()=>{this.setState({show_delete_modal:true})}}>\n                        {delete_icon}\n                    </div>\n\n                    <ConfirmModal \n                        message=\"Deleting Resume\" \n                        show={this.state.show_delete_modal} \n                        onCancel={this.onDeleteCancel} \n                        onConfirm={this.onDeleteConfirm}\n                    />\n                </div>\n            </div>\n        );\n        var form = (\n            <div className=\"row\" ref={this.formRef}>\n            <div className=\"col-10 nopadding text-wrap\">\n                <div className=\"section-content\">\n                    <div className=\"job-profile\">\n                        <div className=\"profile-name\">\n                            <span style={{width:\"60%\"}}>\n                                <input placeholder=\"Resume title\" \n                                        value={this.state.title} \n                                        onChange={(val)=>this.setState({title:val.target.value})}/>\n                            </span> \n                            <span onClick={this.onSave}>{done_icon}</span>\n                        </div>\n\n                        <Form.Group>\n                            <Form.Label>Job Profile</Form.Label>\n                            <Form.Control size=\"sm\" as=\"select\" \n                                defaultValue={this.state.job_profile_fk === null ? \"0\" : this.state.job_profile_fk}\n                                onChange={(e)=>{\n                                    this.setState({job_profile_fk: e.target.value === \"0\" ? null : e.target.value});\n                                }}>\n\n                                <option value=\"0\">None</option>\n                                {\n                                    this.state.jp_options.map(jp =>{\n                                        return <option value={jp['id']}>{jp['profile']}</option>\n                                    })\n                                }        \n                            </Form.Control>\n                        </Form.Group>\n\n                        <Form.Group>\n                            <Form.Label>Profile Summary</Form.Label>\n                            <Form.Control size=\"sm\" as=\"select\" \n                                defaultValue={this.state.profile_summary_fk === null ? \"0\" : this.state.profile_summary_fk} \n                                onChange={(e)=>{\n                                    this.setState({profile_summary_fk: e.target.value === \"0\" ? null : e.target.value});\n                                }}>\n                                \n                                <option value=\"0\">None</option>\n                                {\n                                    this.state.ps_options.map((ps)=>{\n                                        return <option value={ps['id']}>{ps.name}</option>\n                                    })\n                                }\n                            </Form.Control>\n                        </Form.Group>\n\n                    </div>\n                </div>\n            </div>\n        </div> \n        );\n        return <div key={this.state.id}>{main}{form}</div>;\n    }\n}\n\n\n\nclass ResumeControl extends React.Component {\n    // @props: onResumeSelect : callback when a resume is selected.\n    //   callback param: obj {id , title, job_profile_fk, profile_summary_fk }\n    constructor(props){\n        super(props);\n\n        this.state = {\n            resumes : {\n                // 1 : {title : \"Resume 1\", job_profile_fk: 2, profile_summary_fk:null}\n            },\n            selected_resume : 0 ,\n            job_profile_options : [],\n            profile_summary_options : []\n        }\n\n        this.onAdd = this.onAdd.bind(this);\n        this.onUpdate = this.onUpdate.bind(this);\n        this.onDelete = this.onDelete.bind(this);\n        this.onSelect = this.onSelect.bind(this);\n        this.onDownload = this.onDownload.bind(this);\n\n        this.dbResume = new DBEndpoint('coreapi/resumes/');\n        this.dbJobProfile = new DBEndpoint('coreapi/jobprofiles/');\n        this.dbProfSum = new DBEndpoint('coreapi/summaries/');\n    }\n\n    onAdd(){\n        var new_resume = {\n            title : \"New Resume\"\n        };\n        \n        this.dbResume.createOne(new_resume)\n            .then(data =>{\n                var _r = Object.assign({},this.state.resumes);\n                _r[data['id']] = new_resume;\n                this.setState({resumes:_r});\n            });\n    }\n\n    onUpdate(obj){\n        let id = obj['id'];\n        let obj_copy = Object.assign({},obj);\n        delete obj_copy['id'];\n        var _r = Object.assign({},this.state.resumes);\n        _r[id] = obj_copy;\n        this.dbResume.updateOne(id,obj_copy)\n            .then(()=>{\n                this.setState({resumes:_r})\n            });\n\n    }\n\n    onDelete(id){\n        var _r = Object.assign({},this.state.resumes);\n        delete _r[id];\n        this.dbResume.deleteOne(id)\n            .then(()=>{\n                this.setState({resumes:_r});\n            });\n\n        if(id === this.state.selected_resume){\n            this.setState({selected_resume:0});\n            this.props.onResumeSelect(null);\n        }\n    }\n\n    onSelect(id){\n        this.setState({selected_resume:id});\n        if(id != 0) {\n            this.props.onResumeSelect({\n                id : id,\n                ...this.state.resumes[id]\n            });\n        }\n        else {\n            this.props.onResumeSelect(null)\n        }\n    }\n\n    async loadData(){\n        let jp_opt = [];\n        let ps_opt = [];\n        let _resumes = {};\n\n        let data = await this.dbJobProfile.readAll();\n        for(let i of data){\n            jp_opt.push({id : i['id'], profile: i['profile']});\n        }\n        this.setState({job_profile_options:jp_opt});\n\n\n        data = await this.dbProfSum.readAll();\n        for(let i of data){\n            ps_opt.push({id : i['id'], name: i['name']})\n        }\n        this.setState({profile_summary_options:ps_opt});\n\n\n        data = await this.dbResume.readAll();\n        for(let i of data){\n            _resumes[i['id']] = {\n                title : i['title'],\n                job_profile_fk : i['job_profile_fk'],\n                profile_summary_fk: i['profile_summary_fk']\n            };\n        }\n        this.setState({resumes : _resumes});        \n\n\n    }\n\n    componentDidMount(){\n        this.loadData();\n    }\n\n    onDownload(){\n        if(this.state.selected_resume === 0)\n            return\n\n        new DBEndpoint('coreapi/rendered/').downloadPdf(this.state.selected_resume)\n        .then(blob =>{\n            const url = window.URL.createObjectURL( new Blob([blob]),);\n\n            const link = document.createElement('a');\n            let filename = this.state.resumes[this.state.selected_resume]['title'].replace(' ','')+\".pdf\";\n            link.href = url;\n            link.setAttribute('download',filename);\n        \n            // Append to html link element page\n            document.body.appendChild(link);\n        \n            // Start download\n            link.click();\n        \n            // Clean up and remove the link\n            link.parentNode.removeChild(link);\n        });\n    }\n    render(){\n        var main = (\n            <SectionBody heading=\"Resumes\" onAdd={this.onAdd}>\n            {\n                Object.keys(this.state.resumes).map((id,index)=>{\n                    return <ResumeItem \n                                key={id} \n                                id={id} \n                                onChange={this.onUpdate} \n                                onDelete={this.onDelete}\n                                jp_options={this.state.job_profile_options}\n                                ps_options={this.state.profile_summary_options}\n                                {...this.state.resumes[id]} \n                            />\n                })\n            }\n            \n            <div id=\"resume-selector\">\n                <Form.Group>\n                    <Form.Label>Select Resume</Form.Label>\n                    <div className=\"row\">\n                        <div className=\"col-10\">\n                            <Form.Control size=\"sm\" \n                                as=\"select\"\n                                defaultValue={this.state.selected_resume}\n                                onChange={(e)=>{this.onSelect(e.target.value)}}\n                            >\n\n                                <option value=\"0\">None</option>\n                                {\n                                     Object.keys(this.state.resumes).map((id,index)=>{\n                                        return <option value={id}>{this.state.resumes[id].title}</option>\n                                     })\n                                }\n                            </Form.Control>\n                        </div>\n                        <div className=\"col-2\">\n                            <span onClick={this.onDownload} className=\"download-button\">{download}</span>\n                        </div>\n                    </div>\n                </Form.Group>\n            </div>\n\n            </SectionBody>\n        );\n\n        return main;\n    }\n}\n\n\nclass EmptyComposer extends React.Component {\n    render(){\n        return (\n            <div>\n                <Jumbotron>\n                    <h2>Resume composer is empty.</h2>\n                    <p>Select a resume to edit it.</p>\n                </Jumbotron>\n\n            </div>\n\n        )\n    }\n}\n\nexport default class ResumePage extends React.Component {\n    // @props: onNav : function : takes 'history' or 'resumes'\n    constructor(props){\n        super(props);\n        this.onResumeSelect = this.onResumeSelect.bind(this);\n        this.state = {\n            // {id , title, job_profile_fk, profile_summary_fk }\n            selected_resume: null\n        }\n    }\n\n    onResumeSelect(obj){\n        this.setState({selected_resume:obj})\n    }\n    componentDidMount(){\n        this.props.onNav('resumes');\n    }\n\n    render(){\n        var main = (\n            <div className=\"container-fluid\">\n                <div className=\"row\">\n                    <div className=\"col-lg-3 col-md-6\">\n                        <ResumeControl onResumeSelect={this.onResumeSelect}/>\n                    </div>\n                    <div className=\"col-lg-9 col-md-6\">\n                        <div id=\"resume-compose\">\n\n                            {this.state.selected_resume === null ? <EmptyComposer/> : <Composer key={this.state.selected_resume.id} resume={this.state.selected_resume}/>}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n\n        \n        return main;\n    }\n}","/mnt/c/Code/resume_builder/rb_frontend/src/add-history/HistoryPage.js",["70"],"/mnt/c/Code/resume_builder/rb_frontend/src/add-history/components.js",["71"],"import React from 'react';\n\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './historypage.css';\n\nexport let delete_icon = (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"black\" class=\"bi bi-trash-fill\" viewBox=\"0 0 16 16\">\n        <path d=\"M2.5 1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1H3v9a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V4h.5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1H2.5zm3 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5zM8 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5zm3 .5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 1 0z\"/>\n    </svg>\n);\n\nexport let add_icon = (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"black\" class=\"bi bi-plus-circle-fill\" viewBox=\"0 0 16 16\">\n        <path d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM8.5 4.5a.5.5 0 0 0-1 0v3h-3a.5.5 0 0 0 0 1h3v3a.5.5 0 0 0 1 0v-3h3a.5.5 0 0 0 0-1h-3v-3z\"/>\n    </svg>\n);\n\nexport let edit_icon = (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-pencil-fill\" viewBox=\"0 0 16 16\">\n        <path d=\"M12.854.146a.5.5 0 0 0-.707 0L10.5 1.793 14.207 5.5l1.647-1.646a.5.5 0 0 0 0-.708l-3-3zm.646 6.061L9.793 2.5 3.293 9H3.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.207l6.5-6.5zm-7.468 7.468A.5.5 0 0 1 6 13.5V13h-.5a.5.5 0 0 1-.5-.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.5-.5V10h-.5a.499.499 0 0 1-.175-.032l-.179.178a.5.5 0 0 0-.11.168l-2 5a.5.5 0 0 0 .65.65l5-2a.5.5 0 0 0 .168-.11l.178-.178z\"/>\n    </svg>\n);\n\nexport let done_icon = (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-check-circle-fill\" viewBox=\"0 0 16 16\">\n        <path d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z\"/>\n    </svg>\n);\n\nexport let downarrow =(\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-chevron-down\" viewBox=\"0 0 16 16\">\n    <path fill-rule=\"evenodd\" d=\"M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z\"/>\n    </svg>\n);\n\nexport let uparrow = (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-chevron-up\" viewBox=\"0 0 16 16\">\n    <path fill-rule=\"evenodd\" d=\"M7.646 4.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 5.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z\"/>\n    </svg>\n);\n\nexport class EditableDiv extends React.Component{\n    constructor({content,onUpdate,className,...rest}){\n        // @props: content: thing to display\n        // @props: onUpdate: function to be called when content is updated. Takes on argument\n        super(rest);\n        this.state = {\n            value : content,\n            placeholder : ''\n        }\n\n        this.inputRef = React.createRef();\n        this.divRef = React.createRef();\n\n        this.handleClick = this.handleClick.bind(this);\n        this.handleBlur = this.handleBlur.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount(){\n        this.inputRef.current.style.display = 'None';\n        if(this.state.value == '')\n            this.divRef.current.click();\n    }\n\n    handleClick(){\n        this.divRef.current.style.display = 'None';\n        this.inputRef.current.style.display = '';\n        this.inputRef.current.focus();\n    }\n    handleBlur(){\n        if(this.inputRef.current.value.length<1){\n            this.setState({placeholder:'Enter a value'});\n            this.inputRef.current.focus();\n            return;\n        }\n        this.divRef.current.style.display = '';\n        this.inputRef.current.style.display = 'None';\n        this.props.onUpdate(this.state.value);\n    }\n    handleChange(e){\n        this.setState({value : e.target.value});\n    }\n    render(){\n        return (\n            <div>\n                <div \n                    onClick={this.handleClick} \n                    ref={this.divRef}>\n                        {this.state.value}\n                </div>\n                <input \n                    onBlur={this.handleBlur} \n                    onChange={this.handleChange} \n                    ref={this.inputRef} \n                    placeholder={this.state.placeholder} \n                    value={this.state.value}\n                />\n            </div>\n        );\n    }\n}\n\nexport class CollasableDisplay extends React.Component{\n    constructor(props){\n        //@props: optional props: onClickAdd\n        //@props: optional: expendedDefault\n        super(props);\n\n        this.state = {\n            name : props.name,\n            is_expanded : this.props.expendedDefault ? true : false\n        }\n        this.handleToggle = this.handleToggle.bind(this);\n        this.contentRef = React.createRef();\n    }\n\n    componentDidMount(){\n        if(this.state.is_expanded)\n            this.contentRef.current.style.display = \"\";\n        else\n            this.contentRef.current.style.display = \"None\";\n        \n    }\n    handleToggle(){\n        this.setState({is_expanded: !this.state.is_expanded},()=>{\n            var disp = this.state.is_expanded ? '' : 'None';\n            this.contentRef.current.style.display = disp;\n        });\n    }\n\n    render(){\n        var main = (\n\n            <div className=\"collapsable\">\n                <div className=\"row\">\n                    <div className=\"col col-sm-6\">\n                        <div className=\"heading\">\n                            <span>{this.state.name}</span>\n                        </div>\n                    </div>\n                    <div className=\"col col-sm-3\">\n                        <span className=\"close-button\" onClick={this.handleToggle}>\n                            {this.state.is_expanded ? <span>{downarrow}</span> : <span>{uparrow}</span>}\n                        </span>\n\n                    </div>\n                    <div className=\"col col-sm-3\">\n                        { this.props.onClickAdd && <span onClick={this.props.onClickAdd} className=\"add-button\" style={{border:'None'}}>{add_icon}</span>}\n                    </div>\n                </div>\n            </div>\n\n        );\n        return (\n            <>\n            {main}\n            <div ref={this.contentRef}>\n                {this.props.children}\n            </div>\n            </>\n        );\n    }\n}\n\nexport function getDisplayDate(date){\n    // date is a Date object\n    // return string that looks like 'Jan 2019'\n    var mon = new Intl.DateTimeFormat('en',{ month: 'short'}).format(date);\n    var year = new Intl.DateTimeFormat('en',{ year: 'numeric' }).format(date);\n    return mon+' '+year;\n}\n\nexport function parseToDate(str){\n    // str is a date string recieved from the server\n    // in the format of YYYY-MM-DD\n    if(str === null)\n        return null;\n\n    var parts = str.split('-');\n    return new Date(parts[0], parts[1] - 1, parts[2]);\n\n}\n\nexport function splitTextToPara(str){\n    // 1 new line = <br>, 2 new line = new para\n\n    var list = str.split(\"\\n\\n\");\n    list = list.map((val)=>val.split(\"\\n\"));\n\n    return (\n        <span>\n        {\n            list.map(para=>{\n                return (\n                    <p>\n                    {\n                        para.map(line=>{\n                            return <span>{line}<br/></span>\n                        })\n                    }\n                    </p>\n                )\n            })\n        }\n        </span>\n    )\n\n}","/mnt/c/Code/resume_builder/rb_frontend/src/Config.js",[],"/mnt/c/Code/resume_builder/rb_frontend/src/common/Section.js",["72","73"],"/mnt/c/Code/resume_builder/rb_frontend/src/common/Icons.js",[],"/mnt/c/Code/resume_builder/rb_frontend/src/resumes/templates/Zhong.js",["74","75","76","77"],"import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport './resume_base.css';\nimport './Zhong.css';\n\nimport {DBEndpoint} from '../../common/DB';\nimport {getDisplayDate,parseToDate} from '../../common/util';\n\nimport {add_icon,edit_icon,delete_icon,done_icon, downarrow} from '../../common/Icons'\nimport { map, timers } from 'jquery';\n\nvar icons = {\n    mail_icon : (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" className=\"bi bi-envelope-fill\" viewBox=\"0 0 16 16\">\n            <path d=\"M.05 3.555A2 2 0 0 1 2 2h12a2 2 0 0 1 1.95 1.555L8 8.414.05 3.555zM0 4.697v7.104l5.803-3.558L0 4.697zM6.761 8.83l-6.57 4.027A2 2 0 0 0 2 14h12a2 2 0 0 0 1.808-1.144l-6.57-4.027L8 9.586l-1.239-.757zm3.436-.586L16 11.801V4.697l-5.803 3.546z\"/>\n        </svg>),\n    glob_icon : (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" className=\"bi bi-globe\" viewBox=\"0 0 16 16\">\n            <path d=\"M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8zm7.5-6.923c-.67.204-1.335.82-1.887 1.855A7.97 7.97 0 0 0 5.145 4H7.5V1.077zM4.09 4a9.267 9.267 0 0 1 .64-1.539 6.7 6.7 0 0 1 .597-.933A7.025 7.025 0 0 0 2.255 4H4.09zm-.582 3.5c.03-.877.138-1.718.312-2.5H1.674a6.958 6.958 0 0 0-.656 2.5h2.49zM4.847 5a12.5 12.5 0 0 0-.338 2.5H7.5V5H4.847zM8.5 5v2.5h2.99a12.495 12.495 0 0 0-.337-2.5H8.5zM4.51 8.5a12.5 12.5 0 0 0 .337 2.5H7.5V8.5H4.51zm3.99 0V11h2.653c.187-.765.306-1.608.338-2.5H8.5zM5.145 12c.138.386.295.744.468 1.068.552 1.035 1.218 1.65 1.887 1.855V12H5.145zm.182 2.472a6.696 6.696 0 0 1-.597-.933A9.268 9.268 0 0 1 4.09 12H2.255a7.024 7.024 0 0 0 3.072 2.472zM3.82 11a13.652 13.652 0 0 1-.312-2.5h-2.49c.062.89.291 1.733.656 2.5H3.82zm6.853 3.472A7.024 7.024 0 0 0 13.745 12H11.91a9.27 9.27 0 0 1-.64 1.539 6.688 6.688 0 0 1-.597.933zM8.5 12v2.923c.67-.204 1.335-.82 1.887-1.855.173-.324.33-.682.468-1.068H8.5zm3.68-1h2.146c.365-.767.594-1.61.656-2.5h-2.49a13.65 13.65 0 0 1-.312 2.5zm2.802-3.5a6.959 6.959 0 0 0-.656-2.5H12.18c.174.782.282 1.623.312 2.5h2.49zM11.27 2.461c.247.464.462.98.64 1.539h1.835a7.024 7.024 0 0 0-3.072-2.472c.218.284.418.598.597.933zM10.855 4a7.966 7.966 0 0 0-.468-1.068C9.835 1.897 9.17 1.282 8.5 1.077V4h2.355z\"/>\n        </svg>\n    ),\n    linkdin : (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" className=\"bi bi-linkedin\" viewBox=\"0 0 16 16\">\n            <path d=\"M0 1.146C0 .513.526 0 1.175 0h13.65C15.474 0 16 .513 16 1.146v13.708c0 .633-.526 1.146-1.175 1.146H1.175C.526 16 0 15.487 0 14.854V1.146zm4.943 12.248V6.169H2.542v7.225h2.401zm-1.2-8.212c.837 0 1.358-.554 1.358-1.248-.015-.709-.52-1.248-1.342-1.248-.822 0-1.359.54-1.359 1.248 0 .694.521 1.248 1.327 1.248h.016zm4.908 8.212V9.359c0-.216.016-.432.08-.586.173-.431.568-.878 1.232-.878.869 0 1.216.662 1.216 1.634v3.865h2.401V9.25c0-2.22-1.184-3.252-2.764-3.252-1.274 0-1.845.7-2.165 1.193v.025h-.016a5.54 5.54 0 0 1 .016-.025V6.169h-2.4c.03.678 0 7.225 0 7.225h2.4z\"/>\n        </svg>\n    ),\n    github: (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" className=\"bi bi-github\" viewBox=\"0 0 16 16\">\n            <path d=\"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.012 8.012 0 0 0 16 8c0-4.42-3.58-8-8-8z\"/>\n        </svg>\n    ),\n    phone: (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" className=\"bi bi-telephone-fill\" viewBox=\"0 0 16 16\">\n            <path fill-rule=\"evenodd\" d=\"M1.885.511a1.745 1.745 0 0 1 2.61.163L6.29 2.98c.329.423.445.974.315 1.494l-.547 2.19a.678.678 0 0 0 .178.643l2.457 2.457a.678.678 0 0 0 .644.178l2.189-.547a1.745 1.745 0 0 1 1.494.315l2.306 1.794c.829.645.905 1.87.163 2.611l-1.034 1.034c-.74.74-1.846 1.065-2.877.702a18.634 18.634 0 0 1-7.01-4.42 18.634 18.634 0 0 1-4.42-7.009c-.362-1.03-.037-2.137.703-2.877L1.885.511z\"/>\n        </svg>\n    ),\n    house : (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-house-fill\" viewBox=\"0 0 16 16\">\n        <path fill-rule=\"evenodd\" d=\"M8 3.293l6 6V13.5a1.5 1.5 0 0 1-1.5 1.5h-9A1.5 1.5 0 0 1 2 13.5V9.293l6-6zm5-.793V6l-2-2V2.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5z\"/>\n        <path fill-rule=\"evenodd\" d=\"M7.293 1.5a1 1 0 0 1 1.414 0l6.647 6.646a.5.5 0 0 1-.708.708L8 2.207 1.354 8.854a.5.5 0 1 1-.708-.708L7.293 1.5z\"/>\n        </svg>\n    )\n}\n\nlet icon_map = {\n    mail_icon   : icons.mail_icon,\n    glob_icon   : icons.glob_icon,\n    linkdin_icon: icons.linkdin,\n    github_icon : icons.github,\n    phone_icon  : icons.phone,\n    house_icon  : icons.house\n}\n\nexport class TemplateZhong extends React.Component {\n    // Why named Zhong? Becauce copied from https://mnjul.net/cv/resume.pdf\n    render(){\n        var main = (\n            <div className=\"resume-body\">\n                <div className=\"container-fluid\">\n                    <div className=\"row\">\n                        <div className=\"col-lg-8 nopadding\" id=\"main-content-section\">\n                            {/* Main content body goes in this col*/}\n                            <div className=\"resume-sub-section\">\n                                <div className=\"user-name\">Malay Hazarika</div>\n                                <div className=\"user-profile\">Full-Stack Developer</div>\n                                <div className=\"profile-summary\">I am a software engineer with strong inclination towards well engineered solutions over quick fixes. I have implemented reliable systems that scales and are designed for easy of comprehension and maintenance.</div>\n                            </div>\n                            <div className=\"resume-sub-section\">\n                                <div className=\"heading\">Projects</div>\n                                <div className=\"labelled-desc\">\n                                    <div className=\"label-ld\">Large scale web crawller</div>\n                                    <ul>\n                                        <li>\n                                            <div className=\"desc\">\n                                                Built large scale web scraping tool using Python to gather and index data from over 150k ecommerce sites that monitor sales of 27 Million products. This data is used to predict sales patterns to help build effective business strategies for online retailer.\n                                            </div>\n                                        </li>\n                                        <li>\n                                            <div className=\"desc\">\n                                                Built large scale web scraping tool using Python to gather and index data from over 150k ecommerce sites that monitor sales of 27 Million products. This data is used to predict sales patterns to help build effective business strategies for online retailer.\n                                            </div>\n                                        </li>\n                                    </ul>\n                                </div>\n                                <div className=\"labelled-desc\">\n                                    <div className=\"label-ld\">Lorem Ipusm project</div>\n                                    <ul>\n                                        <li>\n                                            <div className=\"desc\">\n                                                Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Integer rutrum sapien enim, ut iaculis dolor feugiat ut. Nam rutrum tempus orci, aliquam vulputate velit venenatis vestibulum. Aenean gravida vitae urna hendrerit dictum. Quisque a orci eu ex pretium tempus luctus sed justo.\n                                            </div>\n                                        </li>\n                                    </ul>\n                                </div>\n                            </div>\n                            <div className=\"resume-sub-section\">\n                                <div className=\"heading\">Experiences</div>\n                                <div className=\"labelled-desc\">\n                                    <div className=\"label-ld\">Software Engineer</div>\n                                    <div className=\"timeframe\">Jul 2019 - Nov 2020</div>\n                                    <div className=\"sub-label\">Subex, Banglore, KA</div>\n                                    <ul>\n                                        <li>\n                                            <div className=\"desc\">\n                                                Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Integer rutrum sapien enim, ut iaculis dolor feugiat ut. Nam rutrum tempus orci, aliquam vulputate velit venenatis vestibulum. Aenean gravida vitae urna hendrerit dictum. Quisque a orci eu ex pretium tempus luctus sed justo.\n                                            </div>\n                                        </li>\n                                    </ul>\n                                </div>\n\n                                <div className=\"labelled-desc\">\n                                    <div className=\"label-ld\">Freelance Developer</div>\n                                    <div className=\"timeframe\">Jan 2018 - Present</div>\n                                    {/* <div className=\"sub-label\">Subex, Banglore, KA</div> */}\n                                    <ul>\n                                        <li>\n                                            <div className=\"desc\">\n                                                Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Integer rutrum sapien enim, ut iaculis dolor feugiat ut. Nam rutrum tempus orci, aliquam vulputate velit venenatis vestibulum. Aenean gravida vitae urna hendrerit dictum. Quisque a orci eu ex pretium tempus luctus sed justo.\n                                            </div>\n                                        </li>\n                                    </ul>\n                                </div>\n                            </div>\n                            <div className=\"resume-sub-section\">\n                                <div className=\"heading\">Education</div>\n                                <div className=\"labelled-desc\">\n                                    <div className=\"label-ld\">B.Tech. Computer Science</div>\n                                    <div className=\"timeframe\">Aug 2015 - Jun 2019</div>\n                                    <div className=\"sub-label\">Dibrugarh Univerisy</div>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"col-lg-4 nopadding\" id=\"sidebar-section\">\n                            {/* The side bar goes here */}\n                            <div className=\"resume-sub-section\">\n                                <div className=\"heading\">Portfolio</div>\n                                <div className=\"labelled-info\">\n                                    <div className=\"label-ld\">{icons.glob_icon}</div>\n                                    <div className=\"info\">thehazarika.com</div>  \n                                </div>\n                                <div className=\"labelled-info\">\n                                    <div className=\"label-ld\">{icons.github}</div>\n                                    <div className=\"info\">github.com/malayh</div>  \n                                </div>\n                            </div>\n                            <div className=\"resume-sub-section\">\n                                <div className=\"heading\">Contact</div>\n                                <div className=\"labelled-info\">\n                                    <div className=\"label-ld\">{icons.phone}</div>\n                                    <div className=\"info\">+91 7896290374</div>  \n                                </div>\n                                <div className=\"labelled-info\">\n                                    <div className=\"label-ld\">{icons.mail_icon}</div>\n                                    <div className=\"info\">malay.hazarika@gmail.com</div>  \n                                </div>\n                                <div className=\"labelled-info\">\n                                    <div className=\"label-ld\">{icons.linkdin}</div>\n                                    <div className=\"info\">linkdin.com/malay-hazarika</div>  \n                                </div>\n                            </div>\n                            <div className=\"resume-sub-section\">\n                                <div className=\"heading\">Skills</div>\n                                <div className=\"skill-section\">\n                                    <div className=\"skill-item\">Python</div>\n                                    <div className=\"skill-item\">C++</div>\n                                    <div className=\"skill-item\">Javascript</div>\n                                    <div className=\"skill-item\">ReactJS</div>\n                                    <div className=\"skill-item\">Django</div>\n                                    <div className=\"skill-item\">Postgres</div>\n                                    <div className=\"skill-item\">Linux</div>\n                                    <div className=\"skill-item\">AWS</div>\n                                    <div className=\"skill-item\">Bash scripting</div>\n                                    <div className=\"skill-item\">System Design</div>\n                                    <div className=\"skill-item\">Data Modelling</div>\n                                    <div className=\"skill-item\">Multithreading</div>\n                                    \n                                </div>\n                            </div>\n                            \n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n        return main;\n    }\n}\n\nclass HoverDropdown extends React.Component {\n    // @props: onSelect: callback when a item is selected\n    // childern can have prop eventKey which will be passed to onSelect callback\n    constructor(props){\n        super(props);\n\n        this.menuRef = React.createRef();\n    }\n\n    render(){\n        return (\n            <div className=\"dropdown\"\n        \n            onMouseLeave={()=>{\n                this.menuRef.current.style.display='none';\n            }}\n            \n            onClick={()=>{\n                // this.menuRef.current.style.display='block'; \n                // this.menuRef.current.style.margin=0\n            }}\n            onMouseEnter={()=>{\n                this.menuRef.current.style.display='block'; \n                this.menuRef.current.style.margin=0\n            }}\n            >                \n                <span>\n                    {this.props.name}                \n                </span> \n\n                <div ref={this.menuRef} className=\"dropdown-menu\">\n                    {this.props.heading && <div className=\"dropdown-header\">{this.props.heading}</div>}\n                    {\n                        React.Children.map(this.props.children, (child, i) =>{\n                            return (\n                                <span key={i} key={i} className=\"dropdown-item\" onClick={()=>{\n                                    if(this.props.onSelect && child.props.eventKey) this.props.onSelect(child.props.eventKey);\n                                }}>{child}</span>\n                            )\n                        })\n                    }\n                </div>\n            </div>\n        );\n    }\n\n\n}\n\nclass SummaryMappableMapping extends React.Component {\n    //@props: id : Mapping id. will be id of coreapi/resumes/{one of edu,xps,projects}\n    //@props: project_summary_opts:  { id : {id, project_fk, summary} }\n    //@props: project_opts: {id : { id : 1, title:\"Lorem Ipsum\"}}\n    //@props: onAddSummaryMap : callback when summry is mapped : Params: project_summary_id,map_prefix,map_id (to which mapping the summary is to be mapped)\n    //@props: onDeleteSummaryMap : callback when summary map is deleted: Param: project_summary_id,map_prefix,map_id\n    //@props: mapPrefix : can be one of [\"edumap\",\"xpmap\",\"projectmap\"] : to be passed in the onAddSummary callback\n    //@props: summaryMappings : [{id: 1, position: 1, template_prop: projectmap_42, project_summary_fk: 53, summary:\"\"}]\n\n    constructor(props){\n        super(props);\n        \n        this.onAddSummary = this.onAddSummary.bind(this);\n        this.onDeleteSummary = this.onDeleteSummary.bind(this);\n    }\n\n    onAddSummary(project_summary_id){\n        this.props.onAddSummaryMap(project_summary_id,this.props.mapPrefix,this.props.id);\n    }\n    onDeleteSummary(project_summary_id){\n        this.props.onDeleteSummaryMap(project_summary_id,this.props.mapPrefix,this.props.id);\n    }\n    render(){\n        \n        // group by project_fk operation\n        // prj_smry = { project_id : [ {id, project_fk, summary} ] }\n        let prj_smry = {};\n        for(let i in this.props.project_summary_opts){\n            let project_id = this.props.project_summary_opts[i]['project_fk'];\n            if(project_id in prj_smry)\n                prj_smry[project_id].push(this.props.project_summary_opts[i])\n            else\n                prj_smry[project_id] = [this.props.project_summary_opts[i]];\n        }\n\n\n        return (\n            <>\n            <div className=\"maping-editor\">\n                <div className=\"labelled-info\" style={{display:\"flex\"}}>\n                    <span className=\"label-ld\">{this.props.title}</span>\n\n                    <span style={{padding:\"0.3em\"}}>\n                        <HoverDropdown name={add_icon} heading=\"Select Project Summary\">\n                        {\n                            Object.keys(prj_smry).map( project_id=> {\n                                return (\n                                    <HoverDropdown name={this.props.project_opts[project_id]['title']} onSelect={this.onAddSummary}>\n                                    {\n                                        prj_smry[project_id].map((summary) =>{\n                                            return <span key={summary.id} eventKey={summary.id}>{summary.summary.substring(0,50)}...</span>\n                                        })\n                                    }\n                                    </HoverDropdown>    \n                                );\n                            })\n                        }\n                        </HoverDropdown>\n                    </span>\n                </div>\n                <span className=\"button\" onClick={()=>this.props.onDelete(this.props.id)}>{delete_icon}</span>\n            </div>\n            \n            <div>\n            {\n                this.props.summaryMappings.map( val => {\n                    return (\n                        <div className=\"maping-editor\" >\n                            <div style={{width:\"90%\",paddingLeft:\"1em\", display:\"flex\"}}>\n                                <span>{val['summary']}</span>\n                                <span className=\"button\" onClick={()=>this.onDeleteSummary(val['id'])}>{delete_icon}</span>\n                            </div>\n                        </div>\n                    );\n                })\n            }\n            </div>\n\n            </>\n        );\n    }\n}\n\nclass MainSubsection extends React.Component {\n    //@props: xp_opts: {id : { id : 1, profile:\"Software Engineer\", company: \"subex\", location: \"\", start_time:, end_time: is_current:}}\n    //@props: project_opts: {id : { id : 1, title:\"Lorem Ipsum\"}}\n    //@props: edu_opts: {id : {id,degree,provider,start_time,end_time,is_current}}\n    //@props: project_summary_opts:  { id :  {id, project_fk, summary} }\n    constructor(props){\n        super(props);\n        this.state = {\n            id : props.id,\n            resume_fk : props.resume_fk,\n            title : props.title,\n            position : props.position,\n\n            xp_mapping : [\n                // {id: 1, position: 1, template_prop:null, skill_fk: 53, name: \"Python\", score:\"\"}\n            ],\n\n            project_mapping : [\n                // {id: 1, position: 1, template_prop:null, project_fk: 53, title: \"Some name\"}\n            ],\n            edu_mapping : [\n                // {id: 1, position: 1, template_prop:null, education_fk: 53, degree: \"\"}\n            ],\n\n            // project_summaries are mapped to other subsection-CONTENT mappings. Using the template_prop\n            // So there is no FK constraint on these mapping. That constraint has to be manually checked.\n            project_summary_mapping : {\n                projectmap : {\n                    // 13 : [{id: 1, position: 1, template_prop: \"projectmap_42\", project_summary_fk: 18, summary:\"Created multithreaded web crawler to catalogue product information across multiple shopping sites to mine product pricing and demand insights for an online retail seller.\"}]\n                    // project_map_id : [{id: 1, position: 1, template_prop: projectmap_42, project_summary_fk: 53, summary:\"\"}]\n                },\n                edumap : {\n                    // education_map_id : [{id: 1, position: 1, template_prop: edumap_24, project_summary_fk: 53, summary:\"\"}]\n                },\n                xpmap : {\n                    // xp_map_id : [{id: 1, position: 1, template_prop: xpmap_45, project_summary_fk: 53, summary:\"\"}]\n                }\n            },\n        };\n\n        \n        this.dispRef = React.createRef();\n        this.formRef = React.createRef();\n        \n        this.onEdit = this.onEdit.bind(this);\n        this.onSave = this.onSave.bind(this);\n        \n        this.prevState = null;\n        \n        this.max_project_map_pos = 1;\n        this.dbProjectMap = new DBEndpoint('coreapi/resumes/projects/');\n        this.onAddProjectMap = this.onAddProjectMap.bind(this);\n        this.onDeleteProjectMap = this.onDeleteProjectMap.bind(this);\n        \n        this.max_edu_map_pos = 1;\n        this.dbEduMap = new DBEndpoint('coreapi/resumes/edus/');\n        this.onAddEduMap = this.onAddEduMap.bind(this);\n        this.onDeleteEduMap = this.onDeleteEduMap.bind(this);\n        \n        this.max_xp_map_pos = 1;\n        this.dbXpMap = new DBEndpoint('coreapi/resumes/xps/');\n        this.onAddXpMap = this.onAddXpMap.bind(this);\n        this.onDeleteXpMap = this.onDeleteXpMap.bind(this);\n\n        this.project_summary_map_pos = {\n            projectmap : 1,\n            edumap : 1,\n            xpmap : 1\n        };\n        this.prj_smry_template_prop_prefixes = new Set([\"edumap\",\"xpmap\",\"projectmap\"]);\n        this.dbPrjSumarryMap = new DBEndpoint('coreapi/resumes/projectsummaries/');\n        this.onAddProjectSummaryMap = this.onAddProjectSummaryMap.bind(this);\n        this.onDeleteProjectSummaryMap = this.onDeleteProjectSummaryMap.bind(this);\n    }\n\n    async loadMappings(){\n        let data = await this.dbProjectMap.addFilter({resume_subsection_fk:this.state.id}).readAll();\n        data.sort((a,b) => (a.position > b.position ? 1 : -1));\n        let _pm = [];\n        for(let i of data){\n            i['title'] = this.props.project_opts[i['project_fk']]['title'];\n            _pm.push(i);\n            if(i['position'] > this.max_project_map_pos)\n                this.max_project_map_pos = i['position'];\n        }\n\n        this.setState({project_mapping:_pm});\n\n        data = await this.dbEduMap.addFilter({resume_subsection_fk:this.state.id}).readAll();\n        data.sort((a,b) => (a.position > b.position ? 1 : -1));\n        let _em = [];\n        for(let i of data){\n            i['degree'] = this.props.edu_opts[i['education_fk']]['degree'];\n            _em.push(i);\n            if(i['position'] > this.max_edu_map_pos)\n                this.max_edu_map_pos = i['position'];\n        }\n\n        this.setState({edu_mapping:_em});\n\n        data = await this.dbXpMap.addFilter({resume_subsection_fk:this.state.id}).readAll();\n        data.sort((a,b) => (a.position > b.position ? 1 : -1));\n        let _xpm = [];\n        for(let i of data){\n            i['profile'] = this.props.xp_opts[i['job_profile_fk']]['profile'];\n            _xpm.push(i);\n            if(i['position'] > this.max_xp_map_pos)\n                this.max_xp_map_pos = i['position'];\n        }\n\n        this.setState({xp_mapping:_xpm});\n\n\n        this.loadProjectSummaryMappings();\n\n    }\n\n    componentDidMount(){\n        this.formRef.current.style.display='None'; \n        this.dispRef.current.style.display='';\n        this.loadMappings();\n    }\n\n    onEdit(){\n        this.dispRef.current.style.display='None';\n        this.formRef.current.style.display='';\n        this.prevState = {\n            id : this.state.id,\n            resume_fk : this.state.resume_fk,\n            title : this.state.title,\n            position : this.state.position\n        };       \n    }\n\n    onSave(){\n        this.formRef.current.style.display='None'; \n        this.dispRef.current.style.display='';\n\n        for(var key in this.prevState){\n            if(this.state[key] !== this.prevState[key]){\n                this.prevState = null;\n                this.props.onChange({\n                    id : this.state.id,\n                    resume_fk : this.state.resume_fk,\n                    title : this.state.title,\n                    position : this.state.position\n                });\n                break;\n            }\n        }\n\n    }\n\n    onAddProjectMap(project_fk){\n        let new_map = { \n            project_fk : project_fk, \n            resume_fk : this.state.resume_fk, \n            resume_subsection_fk : this.state.id,\n            position : this.max_project_map_pos+1\n        };\n        this.dbProjectMap.createOne(new_map)\n        .then(data => {\n            data['title'] = this.props.project_opts[project_fk]['title'];\n            let _pm = Object.assign([],this.state.project_mapping);\n            _pm.push(data);\n            this.setState({project_mapping:_pm});\n            this.max_project_map_pos++;            \n        });\n    }\n    onDeleteProjectMap(map_id){\n        let _pm = Object.assign([],this.state.project_mapping);\n        let index = -1;\n        for(let i=0 ; i < _pm.length ; i++){\n            if(_pm[i].id === map_id){\n                index = i;\n                break;\n            }\n        }\n        if(index < 0)\n            return;\n\n        _pm.splice(index,1);\n\n        this.dbProjectMap.deleteOne(map_id)\n        .then(()=>{\n            this.setState({project_mapping:_pm});\n            this.clearProjectSummaryMapForEntity(\"projectmap\",map_id);        \n        });\n    }\n\n    onAddEduMap(edu_fk){\n        let new_map = {\n            education_fk : edu_fk, \n            resume_fk : this.state.resume_fk, \n            resume_subsection_fk : this.state.id,\n            position : this.max_edu_map_pos+1\n        };\n        this.dbEduMap.createOne(new_map)\n        .then(data =>{\n            data['degree'] = this.props.edu_opts[edu_fk]['degree'];\n            let _em = Object.assign([],this.state.edu_mapping);\n            _em.push(data);\n            this.setState({edu_mapping:_em});\n            this.max_edu_map_pos++; \n        })\n    }\n    onDeleteEduMap(map_id){\n        let _em = Object.assign([],this.state.edu_mapping);\n        let index = -1;\n        for(let i=0 ; i < _em.length ; i++){\n            if(_em[i].id === map_id){\n                index = i;\n                break;\n            }\n        }\n        if(index < 0)\n            return;\n\n        _em.splice(index,1);\n\n        this.dbEduMap.deleteOne(map_id)\n        .then(()=>{\n            this.setState({edu_mapping:_em});\n            this.clearProjectSummaryMapForEntity(\"edumap\",map_id)          \n        });\n    }\n\n    onAddXpMap(job_profile_fk){\n        let new_map = {\n            job_profile_fk : job_profile_fk, \n            resume_fk : this.state.resume_fk, \n            resume_subsection_fk : this.state.id,\n            position : this.max_xp_map_pos+1\n        };\n        this.dbXpMap.createOne(new_map)\n        .then(data =>{\n            data['profile'] = this.props.xp_opts[job_profile_fk]['profile'];\n            let _xpm = Object.assign([],this.state.xp_mapping);\n            _xpm.push(data);\n            this.setState({xp_mapping:_xpm});\n            this.max_xp_map_pos++; \n        })\n    }\n    onDeleteXpMap(map_id){\n        let _xpm = Object.assign([],this.state.xp_mapping);\n        let index = -1;\n        for(let i=0 ; i < _xpm.length ; i++){\n            if(_xpm[i].id === map_id){\n                index = i;\n                break;\n            }\n        }\n        if(index < 0)\n            return;\n\n        _xpm.splice(index,1);\n\n        this.dbXpMap.deleteOne(map_id)\n        .then(()=>{\n            this.setState({xp_mapping:_xpm});\n            this.clearProjectSummaryMapForEntity(\"xpmap\",map_id);         \n        });\n    }\n\n    async loadProjectSummaryMappings(){\n        let data = await this.dbPrjSumarryMap.addFilter({resume_subsection_fk:this.state.id}).readAll();\n        let projectmap = {}\n        let edumap = {};\n        let xpmap = {};\n        for(let i of data){            \n            i['summary'] = this.props.project_summary_opts[i.project_summary_fk]['summary'];\n            \n            if( i['template_prop'] === null )\n                continue;\n            \n            let _to = i['template_prop'].split(\"_\");\n            if(_to.length < 2){\n                // possibly delete the corrupt mapping\n                continue;\n            }\n                \n            if( !this.prj_smry_template_prop_prefixes.has(_to[0]) ){\n                // possibly delete the corrupt mapping\n                continue;\n            }\n\n            if(_to[0] === \"projectmap\"){\n                if(_to[1] in projectmap)\n                    projectmap[_to[1]].push(i);\n                else\n                    projectmap[_to[1]] = [i];\n            }\n            else if(_to[0] === \"edumap\"){\n                if(_to[1] in edumap)\n                    edumap[_to[1]].push(i);\n                else\n                    edumap[_to[1]] = [i];\n            }\n            else{\n                if(_to[1] in xpmap)\n                    xpmap[_to[1]].push(i);\n                else\n                    xpmap[_to[1]] = [i];\n            }\n        }\n\n        let _sm = Object.assign({},this.state.project_summary_mapping);\n        _sm['projectmap'] = projectmap;\n        _sm['edumap'] = edumap;\n        _sm['xpmap'] = xpmap;\n\n        this.setState({project_summary_mapping:_sm});\n    }\n    onAddProjectSummaryMap(project_summary_id,map_prefix,map_id){\n        let new_map = {\n            project_summary_fk : project_summary_id, \n            resume_fk : this.state.resume_fk, \n            resume_subsection_fk : this.state.id,\n            position : this.project_summary_map_pos[map_prefix]+1,\n            template_prop : map_prefix+\"_\"+map_id\n        };\n\n        this.dbPrjSumarryMap.createOne(new_map)\n        .then(data => {\n            data['summary'] = this.props.project_summary_opts[project_summary_id]['summary'];\n            \n            let _sm = Object.assign({},this.state.project_summary_mapping);\n            if(map_id in _sm[map_prefix])\n                _sm[map_prefix][map_id].push(data);\n            else\n                _sm[map_prefix][map_id] = [data];\n    \n            this.project_summary_map_pos[map_prefix]++;\n    \n            this.setState({project_summary_mapping:_sm});\n        });\n        \n\n    }\n    onDeleteProjectSummaryMap(project_summary_map_id,map_prefix,map_id){\n        let _sm = Object.assign({},this.state.project_summary_mapping);\n        \n        if( !(map_id in _sm[map_prefix]) )\n            return;\n        \n        let index = -1;\n        for(let i = 0; i < _sm[map_prefix][map_id].length; i++){\n            if(_sm[map_prefix][map_id][i].id === project_summary_map_id){\n                index = i;\n                break;\n            }\n        }\n\n        if(index < 0)\n            return;\n\n\n        this.dbPrjSumarryMap.deleteOne(project_summary_map_id)\n        .then(data => {\n            _sm[map_prefix][map_id].splice(index,1);\n            this.setState({project_summary_mapping:_sm});        \n\n        });\n        \n        \n    }\n    clearProjectSummaryMapForEntity(map_prefix,id){\n        //mapping of project summaries to edu mapping /project mapping / xp mapping don't have FK contraint. So such mappings has to be manually deleted.\n        if(!(id in this.state.project_summary_mapping[map_prefix]))\n            return;\n\n        for(let i of this.state.project_summary_mapping[map_prefix][id]){\n            this.dbPrjSumarryMap.deleteOne(i['id']);\n        }\n    }\n    render(){\n        var main = (\n            <div className=\"resume-sub-section\" ref={this.dispRef}>\n                <div className=\"heading-edit\">\n                    <span style={{display:\"flex\"}}>\n                        {this.state.title && <div className=\"heading\">{this.state.title}</div> }\n                        <span className=\"button\" onClick={this.onEdit}>{edit_icon}</span>\n                    </span>\n                    <span className=\"button\" onClick={()=>{this.props.onDelete(this.state.id)}}>{delete_icon}</span>\n                </div>\n\n                {\n                    // Project mapping display\n                    this.state.project_mapping.map(val=>{\n                        return(\n                            <div className=\"labelled-desc\">\n                                <div className=\"label-ld\">{val.title}</div>\n                                {val.id in this.state.project_summary_mapping.projectmap && <ul> {\n                                    this.state.project_summary_mapping.projectmap[val.id].map( i => {\n                                        return <li className=\"desc\">{i.summary}</li>\n                                    })\n                                }                                    \n                                </ul>}\n                            </div>\n                        );\n\n                    })\n                }\n                {\n                    // XP mapping display\n                    this.state.xp_mapping.map(val =>{\n                        let label = val.profile;\n                        let start = this.props.xp_opts[val.job_profile_fk]['start_time'] === null ? \"\" : getDisplayDate(parseToDate(this.props.xp_opts[val.job_profile_fk]['start_time']));                        \n                        let end = this.props.xp_opts[val.job_profile_fk]['end_time'] === null ? \"\" : getDisplayDate(parseToDate(this.props.xp_opts[val.job_profile_fk]['end_time'])); \n                        if(this.props.xp_opts[val.job_profile_fk]['is_current'] === true)\n                            end = \"Present\"\n\n                        let subLabel = this.props.xp_opts[val.job_profile_fk]['company'];\n                        if(subLabel !== null && this.props.xp_opts[val.job_profile_fk][\"location\"] !== null)\n                            subLabel+=\"  ,\"+this.props.xp_opts[val.job_profile_fk][\"location\"];\n\n                        return (\n                            <div className=\"labelled-desc\">\n                                <div className=\"label-ld\">{label}</div>\n                                {start && <div className=\"timeframe\">{start} - {end}</div>}\n                                {subLabel && <div className=\"sub-label\">{subLabel}</div>}\n\n                                {val.id in this.state.project_summary_mapping.xpmap && <ul> {\n                                    this.state.project_summary_mapping.xpmap[val.id].map( i => {\n                                        return <li className=\"desc\">{i.summary}</li>\n                                    })\n                                }                                    \n                                </ul>}\n                            </div>\n                        );\n                    })\n                }\n                {\n                    // edu mapping display\n                    this.state.edu_mapping.map(val =>{\n                        let label = val.degree;\n                        let start = this.props.edu_opts[val.education_fk]['start_time'] === null ? \"\" : getDisplayDate(parseToDate(this.props.edu_opts[val.education_fk]['start_time']));                        \n                        let end = this.props.edu_opts[val.education_fk]['end_time'] === null ? \"\" : getDisplayDate(parseToDate(this.props.edu_opts[val.education_fk]['end_time'])); \n                        if(this.props.edu_opts[val.education_fk]['is_current'] === true)\n                            end = \"Present\"\n\n                        let subLabel = this.props.edu_opts[val.education_fk]['provider'];\n\n                        return (\n                            <div className=\"labelled-desc\">\n                                <div className=\"label-ld\">{label}</div>\n                                {start && <div className=\"timeframe\">{start} - {end}</div>}\n                                {subLabel && <div className=\"sub-label\">{subLabel}</div>}\n                                {val.id in this.state.project_summary_mapping.edumap && <ul> {\n                                    this.state.project_summary_mapping.edumap[val.id].map( i => {\n                                        return <li className=\"desc\">{i.summary}</li>\n                                    })\n                                }                                    \n                                </ul>}\n                            </div>\n                        );\n                    })\n                }\n            </div>\n        );\n        var form = (\n            <div className=\"subsection-form\" ref={this.formRef}>\n                <div className=\"heading-edit\">\n                    <input placeholder=\"Section Title\" \n                        value={this.state.title} \n                        onChange={(val)=>this.setState({title:val.target.value})}/>\n                    <span className=\"button\" onClick={this.onSave}>{done_icon}</span>\n                </div>\n\n                <div>\n                {\n                    // Project map edit\n                    this.state.project_mapping.map(val =>{\n                        let _sm =  [];\n                        if(val.id in this.state.project_summary_mapping[\"projectmap\"])\n                            _sm = Object.assign([],this.state.project_summary_mapping[\"projectmap\"][val.id])\n\n                        return (\n                            <SummaryMappableMapping\n                                key={val.id}\n                                id={val.id}\n                                title={val.title}\n                                mapPrefix=\"projectmap\"\n                                summaryMappings={_sm}\n                                onAddSummaryMap={this.onAddProjectSummaryMap}\n                                onDeleteSummaryMap={this.onDeleteProjectSummaryMap}\n                                onDelete={this.onDeleteProjectMap}\n                                project_opts={this.props.project_opts}\n                                project_summary_opts={this.props.project_summary_opts}/>\n                        );\n                    })\n                }\n                </div>\n\n                <div>\n                {\n                    // Edu map edit\n                    this.state.edu_mapping.map(val => {\n                        let _sm = val.id in this.state.project_summary_mapping[\"edumap\"] ? this.state.project_summary_mapping[\"edumap\"][val.id] : [];\n                        return (\n                            <SummaryMappableMapping\n                                key={val.id}\n                                id={val.id}\n                                title={val.degree}\n                                mapPrefix=\"edumap\"\n                                summaryMappings={_sm}\n                                onAddSummaryMap={this.onAddProjectSummaryMap}\n                                onDeleteSummaryMap={this.onDeleteProjectSummaryMap}\n                                onDelete={this.onDeleteEduMap}\n                                project_opts={this.props.project_opts}\n                                project_summary_opts={this.props.project_summary_opts}/>\n                        );\n                    })\n                }\n                </div>\n\n                <div>\n                {\n                    // XP map edit\n                    this.state.xp_mapping.map(val => {\n                        let _sm = val.id in this.state.project_summary_mapping[\"xpmap\"] ? this.state.project_summary_mapping[\"xpmap\"][val.id] : [];\n                        return (\n                            <SummaryMappableMapping\n                                key={val.id}\n                                id={val.id}\n                                title={val.profile}\n                                mapPrefix=\"xpmap\"\n                                summaryMappings={_sm}\n                                onAddSummaryMap={this.onAddProjectSummaryMap}\n                                onDeleteSummaryMap={this.onDeleteProjectSummaryMap}\n                                onDelete={this.onDeleteXpMap}\n                                project_opts={this.props.project_opts}\n                                project_summary_opts={this.props.project_summary_opts}/>\n                        );\n                    })\n                }\n                </div>\n\n                \n\n\n                <div className=\"heading-edit\">\n                    <div className=\"dropdowns\">\n                        <HoverDropdown name={add_icon} heading=\"Select Mapping\">\n                            <HoverDropdown name=\"Experiences\" onSelect={this.onAddXpMap}>\n                            {\n                                Object.keys(this.props.xp_opts).map(key=>{\n                                    return <span key={key} eventKey={key}>{this.props.xp_opts[key]['profile']}</span>\n                                })\n                            }\n                            </HoverDropdown>\n                            <HoverDropdown name=\"Projects\" onSelect={this.onAddProjectMap}>\n                            {\n                                Object.keys(this.props.project_opts).map(key=>{\n                                    return <span key={key} eventKey={key}>{this.props.project_opts[key]['title']}</span>\n                                })\n                            }\n                            </HoverDropdown>\n                            <HoverDropdown name=\"Education\" onSelect={this.onAddEduMap}>\n                            {\n                                Object.keys(this.props.edu_opts).map(key=>{\n                                    return <span key={key} eventKey={key}>{this.props.edu_opts[key]['degree']}</span>\n                                })\n                            }\n                            </HoverDropdown>\n                        </HoverDropdown>\n                    </div>\n                </div>\n\n            </div>\n            \n        );\n\n        return <>{main}{form}</>;\n    }\n}\n\nclass ContactMapping extends React.Component {\n    // For this template template_prop is a a string, which can be null or a key to the icon_map object\n    //@props: onDelete : callback when delete is clicked.: Param: contact mapping id\n    //@props: onUpdate : callback when template_prop is updated: Param: contact mapping id, template_prop\n    constructor(props){\n        super(props);\n        this.onIconSelect = this.onIconSelect.bind(this);\n        this.state ={\n            template_prop : props.template_prop,\n            current_label : props.template_prop === null || !icon_map[props.template_prop] ? props.label : icon_map[props.template_prop]\n        }\n    }\n    onIconSelect(eventKey){\n        if(this.state.template_prop !== eventKey){\n            if(eventKey === \"0\"){\n                this.setState({template_prop:null, current_label:this.props.label});\n                this.props.onUpdate(this.props.id,null);\n            }\n            else{\n                this.props.onUpdate(this.props.id,eventKey);\n                this.setState({template_prop:eventKey, current_label:icon_map[eventKey]});\n            }\n        }\n\n    }\n    render(){\n        return (\n            <div className=\"maping-editor\">\n                <div className=\"labelled-info\">\n                    <div className=\"label-ld\" style={{display:\"flex\"}}>\n                        <HoverDropdown name={this.state.current_label} heading=\"Choose a label\" onSelect={this.onIconSelect}>\n                            <span key=\"0\" eventKey=\"0\">{this.props.label}</span>\n                            {\n                                Object.keys(icon_map).map(key=>{\n                                    return <span key={key} eventKey={key}>{icon_map[key]}</span>                                    \n                                })\n                            }\n                        </HoverDropdown>                        \n                    </div>\n                    <div className=\"info\">{this.props.value}</div>  \n                </div>\n                <span className=\"button\" onClick={()=>this.props.onDelete(this.props.id)}>{delete_icon}</span>\n            </div>            \n        );\n    }\n}\n\nclass SkillMapping extends React.Component {\n    //@props: name\n    //@props: id\n    //@props: onDelete : callback for delete : Param : mapping id\n\n    render(){\n        return (\n        <div className=\"maping-editor\">\n            <div>{this.props.name}</div>\n            <span className=\"button\" onClick={()=>this.props.onDelete(this.props.id)}>{delete_icon}</span>\n        </div>\n        );\n    }\n}\n\nclass SidebarSubsection extends React.Component {\n    //@props onDelete: callback when sidebar subsection is deleted\n    //@props onChange: callback when sidebar subsection is changed\n    //@props contact_opts : obj of contacts : { id: {id : 1, label: \"Phone\", value: \"1245\" } }\n    //@props skill_opts : obj of skills : { id: {id : 1, name: \"C++\", value: \"75\" } }\n\n\n    constructor(props){\n        super(props);\n        this.state = {\n            id : props.id,\n            resume_fk : props.resume_fk,\n            title : props.title,\n            position : props.position,\n\n            skill_mappings : [\n                // {id: 1, position: 1, template_prop:null, skill_fk: 53, name: \"Python\", score:\"\"}\n            ],\n            contact_mappings : [\n                // {id: 1, position: 1, template_prop:null, contact_fk: 17, lable: \"Lable\", value:\"\"}\n            ],\n        }\n\n        \n        this.dispRef = React.createRef();\n        this.formRef = React.createRef();\n        \n        this.onEdit = this.onEdit.bind(this);\n        this.onSave = this.onSave.bind(this);\n        \n        this.prevState = null;\n        \n        this.max_contact_pos = 1;\n        this.dbContactMap = new DBEndpoint('coreapi/resumes/contacts/');\n        this.onContactMapAdd = this.onContactMapAdd.bind(this);\n        this.onContactMapDel = this.onContactMapDel.bind(this);\n        this.onContactMapUpdate = this.onContactMapUpdate.bind(this);\n\n\n        this.max_skill_pos = 1;\n        this.dbSkillMap = new DBEndpoint('coreapi/resumes/skills/');\n        this.onSkillMapAdd = this.onSkillMapAdd.bind(this);\n        this.onSkillMapDelete = this.onSkillMapDelete.bind(this);\n\n    }\n\n    async loadMappings(){\n        let data = await this.dbContactMap.addFilter({resume_subsection_fk:this.state.id}).readAll();\n        data.sort((a,b) => (a.position > b.position ? 1 : -1));\n        let _cm = [];\n        for(let i of data){\n            i['label'] = this.props.contact_opts[i['contact_fk']]['label'];\n            i['value'] = this.props.contact_opts[i['contact_fk']]['value'];\n            _cm.push(i);\n            if(i['position'] > this.max_contact_pos)\n                this.max_contact_pos = i['position'];\n        }\n\n        this.setState({contact_mappings:_cm});\n\n        data = await this.dbSkillMap.addFilter({resume_subsection_fk:this.state.id}).readAll()\n        data.sort((a,b) => (a.position > b.position ? 1 : -1));\n        let _sm = [];\n        for(let i of data){\n            i['name'] = this.props.skill_opts[i['skill_fk']]['name'];\n            i['score'] = this.props.skill_opts[i['skill_fk']]['score'];\n            _sm.push(i);\n            if(i['position'] > this.max_skill_pos)\n                this.max_skill_pos = i['position'];\n        }\n\n        this.setState({skill_mappings:_sm});\n    }\n\n    componentDidMount(){\n        this.formRef.current.style.display='None'; \n        this.dispRef.current.style.display='';\n        this.loadMappings();\n    }\n    onEdit(){\n        this.dispRef.current.style.display='None';\n        this.formRef.current.style.display='';\n        this.prevState = {\n            id : this.state.id,\n            resume_fk : this.state.resume_fk,\n            title : this.state.title,\n            position : this.state.position\n        };        \n    }\n    onSave(){\n        this.formRef.current.style.display='None'; \n        this.dispRef.current.style.display='';\n\n        for(var key in this.prevState){\n            if(this.state[key] !== this.prevState[key]){\n                this.prevState = null;\n                this.props.onChange({\n                    id : this.state.id,\n                    resume_fk : this.state.resume_fk,\n                    title : this.state.title,\n                    position : this.state.position\n                });\n                break;\n            }\n        }\n\n    }\n\n    onContactMapAdd(contact_fk){\n        let new_map = { \n            contact_fk : contact_fk, \n            resume_fk : this.state.resume_fk, \n            resume_subsection_fk : this.state.id,\n            position : this.max_contact_pos+1\n        };\n        this.dbContactMap.createOne(new_map)\n        .then(data =>{\n            data['label'] = this.props.contact_opts[contact_fk]['label'];\n            data['value'] = this.props.contact_opts[contact_fk]['value'];\n            let _cm = Object.assign([],this.state.contact_mappings);\n            _cm.push(data);\n            this.setState({contact_mappings:_cm});\n            this.max_contact_pos++;\n        });\n    }\n\n    onContactMapDel(map_id){\n        let _cm = Object.assign([],this.state.contact_mappings);\n        let index = -1;\n        for(let i=0 ; i < _cm.length ; i++){\n            if(_cm[i].id === map_id){\n                index = i;\n                break;\n            }\n        }\n        if(index < 0)\n            return;\n\n        _cm.splice(index,1);\n\n        this.dbContactMap.deleteOne(map_id)\n        .then(()=>{\n            this.setState({contact_mappings:_cm});            \n        });\n    }\n\n    onContactMapUpdate(map_id,template_prop){\n        let _cm = Object.assign([],this.state.contact_mappings);\n        let index = -1;\n        for(let i=0 ; i < _cm.length ; i++){\n            if(_cm[i].id === map_id){\n                index = i;\n                break;\n            }\n        }\n        if(index < 0)\n            return;\n\n        _cm[index]['template_prop'] = template_prop;\n        this.dbContactMap.updateOne(map_id,_cm[index])\n        .then(()=>{\n            this.setState({contact_mappings:_cm});\n        });\n    }\n\n    onSkillMapAdd(skill_fk){\n        let new_map = { \n            skill_fk : skill_fk, \n            resume_fk : this.state.resume_fk, \n            resume_subsection_fk : this.state.id,\n            position : this.max_skill_pos+1\n        };\n        this.dbSkillMap.createOne(new_map)\n        .then(data=>{\n            data['name'] = this.props.skill_opts[skill_fk]['name'];\n            data['score'] = this.props.skill_opts[skill_fk]['score'];\n\n            let _sm = Object.assign([],this.state.skill_mappings);\n            _sm.push(data);\n            this.setState({skill_mappings:_sm});\n            this.max_skill_pos++;\n        });\n    }\n\n    onSkillMapDelete(map_id){\n        let _sm = Object.assign([],this.state.skill_mappings);\n        let index = -1;\n        for(let i=0 ; i < _sm.length ; i++){\n            if(_sm[i].id === map_id){\n                index = i;\n                break;\n            }\n        }\n        if(index < 0)\n            return;\n\n        _sm.splice(index,1);\n\n        this.dbSkillMap.deleteOne(map_id)\n        .then(()=>{\n            this.setState({skill_mappings:_sm});            \n        });\n    }\n\n\n    render(){\n        var main = (\n            <div className=\"resume-sub-section\" ref={this.dispRef}>\n                <div className=\"heading-edit\">\n                    <span style={{display:\"flex\"}}>\n                        {this.state.title && <div className=\"heading\">{this.state.title}</div> }\n                        <span className=\"button\" onClick={this.onEdit}>{edit_icon}</span>\n                    </span>\n                    <span className=\"button\" onClick={()=>{this.props.onDelete(this.state.id)}}>{delete_icon}</span>\n                </div>\n                \n                {\n                    // Contact mapping display\n                    this.state.contact_mappings.map(i =>{\n                        let label = i.template_prop === null || !icon_map[i.template_prop] ? i.label : icon_map[i.template_prop];\n                        return (\n                            <div className=\"labelled-info\">\n                                <div className=\"label-ld\">{label}</div>\n                                <div className=\"info\">{i.value}</div>  \n                            </div>\n                        );\n                    })\n                }\n                {\n                    this.state.skill_mappings.length > 0 && <div className=\"skill-section\">\n                    {\n                        this.state.skill_mappings.map( i => {\n                            return <div className=\"skill-item\">{i['name']}</div>\n                        })\n                    }\n                    </div>\n                }\n\n\n            </div>\n        );\n        var form = (\n            <div className=\"subsection-form\" ref={this.formRef}>\n                <div className=\"heading-edit\">\n                    <input placeholder=\"Section Title\" \n                        value={this.state.title} \n                        onChange={(val)=>this.setState({title:val.target.value})}/>\n                    <span className=\"button\" onClick={this.onSave}>{done_icon}</span>\n                </div>\n\n                <div className=\"\">\n                {\n                    this.state.contact_mappings.map(val=>{\n                        return (\n                            <ContactMapping \n                                key={val.id} \n                                id={val.id} \n                                label={val.label} \n                                value={val.value} \n                                template_prop={val.template_prop}\n                                onUpdate={this.onContactMapUpdate}\n                                onDelete={this.onContactMapDel}/>\n                        );\n                    })\n                }\n                </div>\n\n                <div>\n                {\n                    this.state.skill_mappings.map(val =>{\n                        return (\n                            <SkillMapping \n                                key={val.id} \n                                id={val.id} \n                                name={val.name}\n                                onDelete={this.onSkillMapDelete}/>\n                        );\n                    })\n                }   \n                </div>\n\n                <div className=\"heading-edit\">\n                    <div className=\"dropdowns\">\n                        <HoverDropdown name={add_icon} heading=\"Select Mapping\">\n                            <HoverDropdown name=\"Contacts\" onSelect={this.onContactMapAdd}>\n                            {\n                                Object.keys(this.props.contact_opts).map(key=>{\n                                    return <span key={key} eventKey={key}>{this.props.contact_opts[key]['label']}</span>\n                                })\n                            }\n                            </HoverDropdown>\n                            <HoverDropdown name=\"Skill\" onSelect={this.onSkillMapAdd}>\n                            {\n                                Object.keys(this.props.skill_opts).map(key=>{\n                                    return <span key={key} eventKey={key}>{this.props.skill_opts[key]['name']}</span>\n                                })\n                            }\n                            </HoverDropdown>\n                        </HoverDropdown>\n                    </div>\n                </div>\n\n            </div>\n        );\n\n        return <>{main}{form}</>;\n    }\n}\n\nexport class Composer extends React.Component {\n    // TODO: Refector the add, delete, update to not repeat\n    // @prop : resume : resume object : {id , title, job_profile_fk, profile_summary_fk }\n    constructor(props){\n        super(props);\n        this.state = {\n            resume: this.props.resume,\n            user_name : null,\n            profile : null,\n            summary: null,\n\n            sidebar_subsec : [\n                // {\"id\": 8, \"resume_fk\": 22, \"title\": \"Portfolio\", \"position\": 101},\n            ],\n\n            main_subsec : [\n                // {\"id\": 8, \"resume_fk\": 22, \"title\": \"Projects\", \"position\": 1},\n            ],\n\n\n            contacts : {\n                // id: {id : 1, label: \"Phone\", value: \"1245\" }\n            },\n            skills : {\n                // id : { id: 1, name: \"Python\", score: 95}\n            },\n            xp : {\n                // id : { id : 1, profile:\"Software Engineer\", company: \"subex\", location: \"\", start_time:, end_time: is_current:}\n            },\n            projects : {\n                // id : { id : 1, title:\"Lorem Ipsum\"}\n            },\n            project_summaries:{\n                // id : {id, project_fk, summary}\n            },\n            educataions : {\n                // id : {id,degree,provider,start_time,end_time,is_current}\n            }\n            \n        }\n\n        this.max_main_subsec_pos = 1;\n        this.max_sidebar_subsec_pos = 101;\n\n        this.dbSubSec = new DBEndpoint('coreapi/resumes/subsecs/');\n\n        this.addSidebarSection = this.addSidebarSection.bind(this);\n        this.onDeleteSidebar = this.onDeleteSidebar.bind(this);\n        this.onUpdateSidebar = this.onUpdateSidebar.bind(this);\n\n        this.onAddMainSections = this.onAddMainSections.bind(this);\n        this.onDeleteMainSection = this.onDeleteMainSection.bind(this);\n        this.onUpdateMainSection = this.onUpdateMainSection.bind(this);\n    }\n\n    onDeleteSidebar(id){\n\n        let _ss = Object.assign([],this.state.sidebar_subsec);\n        let index = -1;\n        for(let i=0 ; i < _ss.length ; i++){\n            if(_ss[i].id === id){\n                index = i;\n                break;\n            }\n        }\n        if(index >= 0){\n            _ss.splice(index,1);\n        }\n        \n        this.dbSubSec.deleteOne(id)\n        .then(()=>{\n            this.setState({sidebar_subsec:_ss});            \n        })\n\n    }\n\n    onUpdateSidebar(obj){\n        let _ss = Object.assign([],this.state.sidebar_subsec);\n        let index = -1;\n        for(let i=0 ; i < _ss.length ; i++){\n            if(_ss[i].id === obj.id){\n                index = i;\n                break;\n            }\n        }\n        if(index < 0)\n            return;\n        \n        for(let key in obj){\n            _ss[index][key] = obj[key];\n        }\n        \n\n        this.dbSubSec.updateOne(obj['id'],obj)\n        .then(()=>{\n            this.setState({sidebar_subsec:_ss})\n        });\n        \n    }\n\n    addSidebarSection(){\n        let new_ss = {\"resume_fk\": this.state.resume.id, \"title\": \"Subsection\", \"position\": this.max_sidebar_subsec_pos+1};\n        this.dbSubSec.createOne(new_ss)\n        .then(data=>{\n            let _ss = Object.assign([],this.state.sidebar_subsec);\n            _ss.push(data);\n            this.setState({sidebar_subsec:_ss});\n            this.max_sidebar_subsec_pos++;\n        });                \n        \n    }\n\n    onAddMainSections(){\n        // TODO: Add the following check\n\n        // Mai section can have at most 100 subsections. Because subsection with position > 100 will become part of sidebar.\n        // So adding and deleting continuously may increase the next usable position to be > 100. In that case we have to\n        // alter positions of each subsection to be continuos so that we can use positions that were deleted and was never used.\n        // So cheack if next avaiable positions > 100 and if number of subsections in main section < 100 then defragment \n        // the positions to make the continous. Then again check\n\n        // TODO: Returning now. But need to run defragment before returning\n        if(this.max_main_subsec_pos+1 > 99)\n            return;\n\n        let new_ss = {\"resume_fk\": this.state.resume.id, \"title\": \"Subsection\", \"position\": this.max_main_subsec_pos+1};\n        this.dbSubSec.createOne(new_ss)\n        .then(data=>{\n            let _ss = Object.assign([],this.state.main_subsec);\n            _ss.push(data);\n            this.setState({main_subsec:_ss});\n            this.max_main_subsec_pos++;\n        });\n\n    }\n\n    onDeleteMainSection(id){\n        let _ms = Object.assign([],this.state.main_subsec);\n        let index = -1;\n        for(let i=0 ; i < _ms.length ; i++){\n            if(_ms[i].id === id){\n                index = i;\n                break;\n            }\n        }\n        if(index >= 0){\n            _ms.splice(index,1);\n        }\n        \n        this.dbSubSec.deleteOne(id)\n        .then(()=>{\n            this.setState({main_subsec:_ms});            \n        })\n    }\n\n    onUpdateMainSection(obj){\n        let _ms = Object.assign([],this.state.main_subsec);\n        let index = -1;\n        for(let i=0 ; i < _ms.length ; i++){\n            if(_ms[i].id === obj.id){\n                index = i;\n                break;\n            }\n        }\n        if(index < 0)\n            return;\n        \n        for(let key in obj){\n            _ms[index][key] = obj[key];\n        }\n        \n\n        this.dbSubSec.updateOne(obj['id'],obj)\n        .then(()=>{\n            this.setState({main_subsec:_ms})\n        });\n    }\n\n    defragmentPositions(){\n\n    }\n\n    async loadSubsectionMenuData(){\n\n        let _contacts = {};\n        let data = await new DBEndpoint('coreapi/contacts/').readAll()\n        for(let i of data)\n            _contacts[i.id] = i;\n\n        this.setState({contacts:_contacts});\n\n        let _skills = {};\n        data = await new DBEndpoint('coreapi/skills/').readAll();\n        for(let i of data)\n            _skills[i.id] = i;\n            \n        this.setState({skills:_skills});\n\n        let _xp = {};\n        data = await new DBEndpoint('coreapi/jobprofiles/').readAll();\n        for(let i of data)\n            _xp[i.id] = i;\n\n        this.setState({xp:_xp});\n\n        let _prj = {};\n        data = await new DBEndpoint('coreapi/projects/').readAll();\n        for(let i of data){\n            _prj[i.id] = {id : i.id, title: i.title }\n        }\n\n        this.setState({projects:_prj});\n\n        let _smr = {};\n        for(let project_id in _prj){\n            data = await new DBEndpoint('coreapi/projects/'+project_id+'/summaries/').readAll();\n            for(let i of data){\n                _smr[i.id] = i;\n            }\n        }\n\n        this.setState({project_summaries:_smr});\n\n        let _edu = {};\n        data = await new DBEndpoint('coreapi/edus/').readAll();\n        for(let i of data)\n            _edu[i.id] = i\n        this.setState({educataions:_edu})\n\n\n\n        data = await this.dbSubSec.addFilter({resume_fk:this.state.resume.id}).readAll()\n        data.sort((a,b) => (a.position > b.position ? 1 : -1));\n        let _main_subsec = [];\n        let _side_subsec = [];\n        for(let i of data){\n            if(i['position'] < 100){\n                _main_subsec.push(i);\n                if(i['position'] > this.max_main_subsec_pos)\n                    this.max_main_subsec_pos = i.position;\n            }\n            else {\n                _side_subsec.push(i);\n                if(i['position'] > this.max_sidebar_subsec_pos)\n                    this.max_sidebar_subsec_pos = i.position;\n            }\n        }\n\n        \n        this.setState({sidebar_subsec: _side_subsec});\n        this.setState({main_subsec : _main_subsec});\n\n    }\n\n    componentDidMount(){\n        new DBEndpoint('users/').readAll()\n        .then(data => {\n            this.setState({user_name:data['name']});\n        });\n\n\n        if(this.state.resume.job_profile_fk !== null){\n            new DBEndpoint('coreapi/jobprofiles/').readOne(this.state.resume.job_profile_fk)\n            .then(data => {\n                this.setState({profile: data['profile']});\n            });\n        }\n        \n\n\n        if(this.state.resume.profile_summary_fk !== null){\n            new DBEndpoint('coreapi/summaries/').readOne(this.state.resume.profile_summary_fk)\n            .then(data =>{\n                this.setState({summary: data['summary']});\n            });\n        }\n        \n        this.loadSubsectionMenuData();\n    }\n\n    \n\n    render(){\n        var main = (\n            <div className=\"resume-body\">\n                <div className=\"container-fluid\">\n                    <div className=\"row\">\n                        <div className=\"col-lg-8 nopadding\" id=\"main-content-section\">\n                            <div className=\"resume-sub-section\">\n                                <div className=\"user-name\">{this.state.user_name}</div>\n                                {this.state.profile && <div className=\"user-profile\">{this.state.profile}</div>}\n                                {this.state.summary && <div className=\"profile-summary\">{this.state.summary}</div>}\n                            </div>\n                            {\n                                this.state.main_subsec.map(subsec =>{\n                                    return (\n                                        <MainSubsection \n                                            key={subsec.id} \n                                            {...subsec}\n                                            onDelete={this.onDeleteMainSection}\n                                            onChange={this.onUpdateMainSection}\n                                            xp_opts={this.state.xp}\n                                            project_opts={this.state.projects}\n                                            project_summary_opts={this.state.project_summaries}\n                                            edu_opts={this.state.educataions}\n                                        />)\n                                    ;\n                                })\n                            }\n                            <div className=\"resume-sub-section\">\n                                <span className=\"add-button\" onClick={this.onAddMainSections}>\n                                        <span>{add_icon}</span>\n                                </span>                                             \n                            </div>\n                            \n                        </div>\n                        <div className=\"col-lg-4 nopadding\" id=\"sidebar-section\">\n                            {\n                                this.state.sidebar_subsec.map(subsec =>{\n                                    return (\n                                        <SidebarSubsection \n                                            key={subsec.id} \n                                            {...subsec} \n                                            onDelete={this.onDeleteSidebar} \n                                            onChange={this.onUpdateSidebar}\n                                            contact_opts={this.state.contacts}\n                                            skill_opts={this.state.skills}\n                                        />\n                                    );\n                                })\n                            }\n                            \n                            <div className=\"resume-sub-section\">\n                                <span className=\"add-button\" onClick={this.addSidebarSection}>\n                                    <span>{add_icon}</span>\n                                </span>                                             \n                            </div>                     \n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n\n        return main;\n    }\n}","/mnt/c/Code/resume_builder/rb_frontend/src/common/DB.js",["78","79","80","81","82"],"/mnt/c/Code/resume_builder/rb_frontend/src/common/util.js",[],{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","severity":1,"message":"88","line":3,"column":9,"nodeType":"89","messageId":"90","endLine":3,"endColumn":25},{"ruleId":"91","severity":1,"message":"92","line":85,"column":24,"nodeType":"93","messageId":"94","endLine":85,"endColumn":26},{"ruleId":"95","severity":1,"message":"96","line":192,"column":64,"nodeType":"97","endLine":192,"endColumn":95},{"ruleId":"95","severity":1,"message":"96","line":199,"column":60,"nodeType":"97","endLine":199,"endColumn":91},{"ruleId":"98","severity":1,"message":"99","line":213,"column":25,"nodeType":"97","endLine":213,"endColumn":71},{"ruleId":"87","severity":1,"message":"100","line":11,"column":9,"nodeType":"89","messageId":"90","endLine":11,"endColumn":19},{"ruleId":"87","severity":1,"message":"101","line":6,"column":9,"nodeType":"89","messageId":"90","endLine":6,"endColumn":22},{"ruleId":"87","severity":1,"message":"102","line":15,"column":20,"nodeType":"89","messageId":"90","endLine":15,"endColumn":31},{"ruleId":"103","severity":1,"message":"104","line":23,"column":5,"nodeType":"105","messageId":"106","endLine":25,"endColumn":6},{"ruleId":"91","severity":1,"message":"107","line":270,"column":15,"nodeType":"93","messageId":"94","endLine":270,"endColumn":17},{"ruleId":"103","severity":1,"message":"104","line":1334,"column":5,"nodeType":"105","messageId":"106","endLine":1338,"endColumn":6},{"ruleId":"91","severity":1,"message":"92","line":62,"column":29,"nodeType":"93","messageId":"94","endLine":62,"endColumn":31},{"ruleId":"103","severity":1,"message":"104","line":20,"column":5,"nodeType":"105","messageId":"106","endLine":22,"endColumn":6},{"ruleId":"103","severity":1,"message":"104","line":48,"column":5,"nodeType":"105","messageId":"106","endLine":50,"endColumn":6},{"ruleId":"87","severity":1,"message":"108","line":10,"column":51,"nodeType":"89","messageId":"90","endLine":10,"endColumn":60},{"ruleId":"87","severity":1,"message":"109","line":11,"column":10,"nodeType":"89","messageId":"90","endLine":11,"endColumn":13},{"ruleId":"87","severity":1,"message":"110","line":11,"column":15,"nodeType":"89","messageId":"90","endLine":11,"endColumn":21},{"ruleId":"111","severity":1,"message":"112","line":225,"column":47,"nodeType":"113","endLine":225,"endColumn":54},{"ruleId":"114","severity":1,"message":"115","line":4,"column":5,"nodeType":"116","messageId":"117","endLine":4,"endColumn":18,"fix":"118"},{"ruleId":"119","severity":1,"message":"120","line":7,"column":25,"nodeType":"121","messageId":"122","endLine":7,"endColumn":26,"suggestions":"123"},{"ruleId":"124","severity":1,"message":"125","line":13,"column":16,"nodeType":"126","messageId":"127","endLine":13,"endColumn":33},{"ruleId":"91","severity":1,"message":"92","line":29,"column":19,"nodeType":"93","messageId":"94","endLine":29,"endColumn":21},{"ruleId":"85","severity":1,"message":"128","line":58,"column":12,"nodeType":"93","messageId":"129","endLine":58,"endColumn":33},"no-native-reassign",["130"],"no-negated-in-lhs",["131"],"no-unused-vars","'storageAvailable' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'DBEndpoint' is defined but never used.","'TemplateZhong' is defined but never used.","'globalCache' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","Expected '!==' and instead saw '!='.","'downarrow' is defined but never used.","'map' is defined but never used.","'timers' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","strict","'use strict' is unnecessary inside of modules.","ExpressionStatement","module",{"range":"132","text":"133"},"no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["134","135"],"no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","The 'in' expression's left operand is negated.","negatedLHS","no-global-assign","no-unsafe-negation",[76,89],"",{"messageId":"136","fix":"137","desc":"138"},{"messageId":"139","fix":"140","desc":"141"},"removeEscape",{"range":"142","text":"133"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"143","text":"144"},"Replace the `\\` with `\\\\` to include the actual backslash character.",[189,190],[189,189],"\\"]