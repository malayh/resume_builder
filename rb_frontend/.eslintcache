[{"/mnt/c/Code/resume_builder/rb_frontend/src/index.js":"1","/mnt/c/Code/resume_builder/rb_frontend/src/login/Login.js":"2","/mnt/c/Code/resume_builder/rb_frontend/src/util.js":"3","/mnt/c/Code/resume_builder/rb_frontend/src/ResumeBuilder.js":"4","/mnt/c/Code/resume_builder/rb_frontend/src/resumes/ResumePage.js":"5","/mnt/c/Code/resume_builder/rb_frontend/src/add-history/HistoryPage.js":"6","/mnt/c/Code/resume_builder/rb_frontend/src/add-history/components.js":"7","/mnt/c/Code/resume_builder/rb_frontend/src/Config.js":"8"},{"size":239,"mtime":1612419422303,"results":"9","hashOfConfig":"10"},{"size":6118,"mtime":1612723978855,"results":"11","hashOfConfig":"10"},{"size":1004,"mtime":1612428336101,"results":"12","hashOfConfig":"10"},{"size":6499,"mtime":1612519239628,"results":"13","hashOfConfig":"10"},{"size":357,"mtime":1612427953013,"results":"14","hashOfConfig":"10"},{"size":45928,"mtime":1612806128422,"results":"15","hashOfConfig":"10"},{"size":6873,"mtime":1612805656101,"results":"16","hashOfConfig":"10"},{"size":103,"mtime":1612724521416,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"wo89w9",{"filePath":"21","messages":"22","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"/mnt/c/Code/resume_builder/rb_frontend/src/index.js",[],["38","39"],"/mnt/c/Code/resume_builder/rb_frontend/src/login/Login.js",["40","41","42","43"],"import React from 'react';\nimport $ from 'jquery';\nimport {storageAvailable , isValidEmail} from '../util'\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './login.css';\nimport '../main.css';\nimport {configs} from '../Config'\n\nexport default class LoginPage extends React.Component {\n    \n    constructor(props){\n        // @props: onLogin\n        super(props);\n        this.toggleSignup = this.toggleSignup.bind(this);\n        this.handleLogin = this.handleLogin.bind(this);\n        this.handleSignup = this.handleSignup.bind(this);\n\n        this.state = {\n            formError:\"\"\n        }\n        this.baseApiUrl = configs.apiHostUrl;\n    }\n\n    toggleSignup() {\n        $('#login-form form').animate({height: \"toggle\", opacity: \"toggle\"}, \"slow\");\n        this.setState({formError:\"\"});\n    }\n\n    handleLoginSuccessful(resp){\n        if(resp.status === 404){\n            this.setState({formError:\"Invalid credentials\"});\n            return;\n        }\n\n        if(resp.status === 400){\n            this.setState({formError:\"Provide both email and password\"});\n            return;\n        }\n        \n        if(!('token' in resp.data)){\n            this.setState({formError:\"Sorry, Something went wrong.\"});\n            return;\n\n        }\n\n        window.localStorage.setItem(\"rb_access_token\",resp.data.token);\n        this.setState({formError:\"\"});\n        this.props.onLogin();\n\n    }\n\n    handleLoginFailure(){\n        this.setState({formError:\"Sorry, Something went wrong.\"});\n    }\n\n    handleLogin(e){\n        e.preventDefault();\n\n        if(!isValidEmail(e.target.email.value)){\n            this.setState({formError:\"Invalid Email\"});\n            return;\n        }\n\n        const requestOpts = {\n            method  : \"POST\",\n            headers : { 'Content-Type': 'application/json' },\n            body    : JSON.stringify({ email: e.target.email.value, password: e.target.password.value })\n        };\n        \n\n        fetch(this.baseApiUrl+'users/login/',requestOpts)\n            .then(resp => resp.json()\n                .then(body => ({data:body, status:resp.status})))                \n            .then(data => this.handleLoginSuccessful(data), error => this.handleLoginFailure(error));\n    }\n\n    handleSignupSuccess(resp,e){\n        console.log(e);\n        if(resp.status === 406 ){\n            this.setState({formError: resp.data.msg})\n            return;\n        }\n        if(resp.status == 400){\n            this.setState({formError:\"Sorry, Something went wrong.\"});\n            return;\n        }\n\n        this.handleLogin(e);\n    }\n\n    handleSignup(e){\n        e.preventDefault();\n        \n        if(e.target.name.value === \"\"){\n            this.setState({formError:\"Please enter your full name.\"});\n            return;\n        }\n\n        if(!isValidEmail(e.target.email.value)){\n            this.setState({formError:\"Please enter a valid email address.\"});\n            return;\n        }\n\n        if(e.target.password.value === \"\" )\n        {\n            this.setState({formError:\"Password cannot be empty\"});\n            return;\n        }\n\n        if(e.target.password2.value === \"\" )\n        {\n            this.setState({formError:\"Confirm your password\"});\n            return;\n        }\n\n        if(e.target.password.value !== e.target.password2.value){\n            this.setState({formError:\"Passwords don't match.\"});\n            return;\n        }\n\n        const requestOpts = {\n            method  : \"POST\",\n            headers : { 'Content-Type': 'application/json' },\n            body    : JSON.stringify({ email: e.target.email.value, password: e.target.password.value, name: e.target.name.value})\n        };\n\n        this.setState({formError:\"\"});\n\n        fetch(this.baseApiUrl+'users/signup/',requestOpts)\n            .then(resp => resp.json()\n                .then(body => ({data:body, status:resp.status})))                \n            .then(data => this.handleSignupSuccess(data,e), error => this.setState({formError:\"Sorry, Something went wrong.\"}));\n\n    }\n\n\n    render(){\n        const content = (\n            <div id=\"login-content\">\n                <div className=\"container-fluid\">\n                    <div className=\"row\">\n                    </div>\n                </div>                \n            </div>\n        );\n\n        const login_singup = (\n            <div id=\"login-page\">\n                <div id=\"login-form\">\n                <form className=\"register-form\" onSubmit={this.handleSignup}>\n                    <input type=\"text\" name=\"name\" placeholder=\"Name\"/>\n                    <input type=\"text\" name=\"email\" placeholder=\"Email address\"/>\n                    <input type=\"password\" name=\"password\" placeholder=\"Password\"/>\n                    <input type=\"password\" name=\"password2\" placeholder=\"Confirm password\"/>\n                    <p className=\"error-msg\">{this.state.formError}</p>\n                    <button>Create</button>\n                    <p className=\"message\">Already registered? <a onClick={this.toggleSignup}>Sign In</a></p>\n                </form>\n                <form className=\"login-form\" onSubmit={this.handleLogin}>\n                    <input type=\"text\" name=\"email\" placeholder=\"Email\"/>\n                    <input type=\"password\" name=\"password\" placeholder=\"Password\"/>\n                    <p className=\"error-msg\">{this.state.formError}</p>\n                    <button type=\"submit\" >Login</button>\n                    <p className=\"message\">Not registered? <a onClick={this.toggleSignup}>Create an account</a></p>\n                </form>\n                </div>\n            </div>\n        );\n\n        const loginpage = (\n            <div className=\"container-fluid\">\n                <div className=\"row\">\n                    <div className=\"col-lg-5 col-md-6 nopadding\">\n                        <h1 id=\"app_name\">Resume Builder</h1>\n                        {login_singup}\n                    </div>\n                    <div className=\"col-lg-7 col-md-6 nopadding\">\n                        {content}\n                    </div>\n                </div>\n            </div>\n        );\n\n        return loginpage;\n    }    \n}\n","/mnt/c/Code/resume_builder/rb_frontend/src/util.js",[],"/mnt/c/Code/resume_builder/rb_frontend/src/ResumeBuilder.js",["44","45","46","47","48","49"],"import React from 'react';\nimport { Navbar,Nav,NavDropdown,Form,FormControl,Button} from 'react-bootstrap'\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './main.css';\n\nimport LoginPage from './login/Login';\nimport ResumePage from './resumes/ResumePage';\nimport HistoryPage from './add-history/HistoryPage';\nimport storageAvailable from './util'\n\nimport {Link, BrowserRouter as Router,Route, Switch, Redirect, useHistory} from 'react-router-dom';\n\nclass Navigation extends React.Component {\n    constructor(props){\n        // @props: active_nav should be one of ('history','resumes')\n        // @props: onLogout : function: to be called when logout is clicked.\n        // @props: historyPath : path to history page\n        // @props: resumesPath : path to resumes page\n\n        super(props);\n    }\n    render(){\n        const nav = (\n            <Navbar id=\"main-nav\" collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n                <Navbar.Brand>Resume builder</Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\n                    <ul className=\"navbar-nav mr-auto\">\n                        \n                        <li className={'nav-item '+ (this.props.active_nav==='history'?'active':'')}>\n                            <Link   to={this.props.historyPath} \n                                    className=\"nav-link\">History\n                            </Link>\n                        </li>\n                        <li className={'nav-item '+ (this.props.active_nav==='resumes'?'active':'')}>\n                            <Link   to={this.props.resumesPath} \n                                    className=\"nav-link\">Resumes\n                            </Link>\n                        </li>\n                    </ul>\n                    <ul className=\"navbar-nav mr-sm-4\">\n                        <NavDropdown title=\"Account\" id=\"collasible-nav-dropdown\">\n                            <NavDropdown.Item onClick={this.props.onLogout}>Logout</NavDropdown.Item>\n                        </NavDropdown>\n                    </ul>\n                </Navbar.Collapse>\n            </Navbar>\n        );\n\n\n        return nav;\n    }\n}\n\nfunction LoginPageRoute(props){\n    // @props: onLogin : Is ResumeBuilder.handleLogin method\n    return <Route \n            {...props}\n            // WHY THE FUCK does this work?\n            // Copied from https://stackoverflow.com/questions/31079081/programmatically-navigate-using-react-router\n            // I hate JS!\n            render = {({history})=>{\n                return <LoginPage onLogin={()=>{\n                    if(history.location.state !=null)\n                        props.onLogin(history,history.location.state.referrer);\n                }}/>\n            }}/>\n}\n\n\n\nexport default class ResumeBuilder extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            active_nav  :'history',\n            loggedIn    : false\n        }\n        this.handleNav = this.handleNav.bind(this);\n        this.handleLogout = this.handleLogout.bind(this);\n        this.handleLogin = this.handleLogin.bind(this);\n\n        if(!storageAvailable('localStorage')){\n            // Panic! Return.\n            return;\n        }\n\n        this.basePath = '/';\n        \n        this.loginPath = this.basePath + 'login/';\n        this.historyPath = this.basePath + 'history/';\n        this.resumesPath = this.basePath + 'resumes/'\n\n    }\n    componentDidMount(){\n        // TODO: Need to varify if the token is valid or not.\n        if(window.localStorage.getItem('rb_access_token') !== null){\n            this.setState({loggedIn:true});\n        }\n    }\n\n    handleNav(curNav){\n        this.setState({active_nav:curNav});\n    }\n    handleLogout(){\n        this.setState({loggedIn:false});\n        window.localStorage.clear();\n    }\n    handleLogin(history,previous_path){\n        // @param: history : Router.history object\n        // @param: previous_path : Refering path string\n        if(history != null && previous_path != null){\n            history.push(previous_path);\n        }\n\n        this.setState({loggedIn:true});\n    }\n\n    render(){      \n\n        const main = (\n            <Router>\n                {/* When you type in the resume link without login and then login, it will not redirect to resume, it will redirect to home \n                    because of the following Route. Idk how to solve this. So I am not doing this.\n                */}\n\n                <Route path={this.loginPath}>\n                    {this.state.loggedIn ? <Redirect to={this.basePath} /> : <LoginPageRoute onLogin={this.handleLogin} path={this.loginPath} />}\n                </Route>\n\n                <div className='container-fluid'>\n                    <div className=\"row\">\n                    {\n                        // Don't display the nav bar if not logged in\n                        this.state.loggedIn ? \n                            <Navigation \n                                active_nav={this.state.active_nav}\n                                onLogout={this.handleLogout}\n                                resumesPath={this.resumesPath}\n                                historyPath={this.historyPath}\n                            /> : <div/> \n                    }\n                    </div>\n                    <div className=\"row\">\n                        <Switch>\n                            <Route path={this.historyPath}>\n                            { \n                                this.state.loggedIn ? \n                                    <HistoryPage onNav={this.handleNav}/> : \n                                    <Redirect to={{pathname : this.loginPath ,state : { referrer : this.historyPath } }}/> \n                            }    \n                            </Route>\n                            <Route path={this.resumesPath}>\n                            {\n                                this.state.loggedIn ? \n                                    <ResumePage onNav={this.handleNav}/> : \n                                    <Redirect to={{ pathname : this.loginPath, state : { referrer :this.resumesPath } }}/> \n                            }\n                            </Route>\n                            <Redirect exact from={this.basePath} to={this.historyPath} />\n                        </Switch>\n                    </div>\n                </div>\n            </Router>\n        );\n        return main;\n    }\n}","/mnt/c/Code/resume_builder/rb_frontend/src/resumes/ResumePage.js",["50"],"import React from 'react';\n\nexport default class ResumePage extends React.Component {\n    constructor(props){\n        // @props: onNav : function : takes 'history' or 'resumes'\n        super(props);\n    }\n\n    componentDidMount(){\n        this.props.onNav('resumes');\n    }\n    render(){\n        return (\n            <h1>Resumes page</h1>\n        );\n    }\n}","/mnt/c/Code/resume_builder/rb_frontend/src/add-history/HistoryPage.js",["51","52"],"/mnt/c/Code/resume_builder/rb_frontend/src/add-history/components.js",["53","54"],"/mnt/c/Code/resume_builder/rb_frontend/src/Config.js",[],{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":3,"column":9,"nodeType":"61","messageId":"62","endLine":3,"endColumn":25},{"ruleId":"63","severity":1,"message":"64","line":84,"column":24,"nodeType":"65","messageId":"66","endLine":84,"endColumn":26},{"ruleId":"67","severity":1,"message":"68","line":158,"column":64,"nodeType":"69","endLine":158,"endColumn":95},{"ruleId":"67","severity":1,"message":"68","line":165,"column":60,"nodeType":"69","endLine":165,"endColumn":91},{"ruleId":"59","severity":1,"message":"70","line":2,"column":17,"nodeType":"61","messageId":"62","endLine":2,"endColumn":20},{"ruleId":"59","severity":1,"message":"71","line":2,"column":33,"nodeType":"61","messageId":"62","endLine":2,"endColumn":37},{"ruleId":"59","severity":1,"message":"72","line":2,"column":38,"nodeType":"61","messageId":"62","endLine":2,"endColumn":49},{"ruleId":"59","severity":1,"message":"73","line":2,"column":50,"nodeType":"61","messageId":"62","endLine":2,"endColumn":56},{"ruleId":"59","severity":1,"message":"74","line":12,"column":64,"nodeType":"61","messageId":"62","endLine":12,"endColumn":74},{"ruleId":"75","severity":1,"message":"76","line":15,"column":5,"nodeType":"77","messageId":"78","endLine":22,"endColumn":6},{"ruleId":"75","severity":1,"message":"76","line":4,"column":5,"nodeType":"77","messageId":"78","endLine":7,"endColumn":6},{"ruleId":"79","severity":1,"message":"80","line":29,"column":28,"nodeType":"81","messageId":"82","endLine":29,"endColumn":39},{"ruleId":"75","severity":1,"message":"76","line":1253,"column":5,"nodeType":"77","messageId":"78","endLine":1257,"endColumn":6},{"ruleId":"59","severity":1,"message":"83","line":2,"column":8,"nodeType":"61","messageId":"62","endLine":2,"endColumn":18},{"ruleId":"63","severity":1,"message":"64","line":63,"column":29,"nodeType":"65","messageId":"66","endLine":63,"endColumn":31},"no-native-reassign",["84"],"no-negated-in-lhs",["85"],"no-unused-vars","'storageAvailable' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Nav' is defined but never used.","'Form' is defined but never used.","'FormControl' is defined but never used.","'Button' is defined but never used.","'useHistory' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","'DatePicker' is defined but never used.","no-global-assign","no-unsafe-negation"]