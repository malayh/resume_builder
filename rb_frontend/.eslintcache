[{"/mnt/c/Code/resume_builder/rb_frontend/src/index.js":"1","/mnt/c/Code/resume_builder/rb_frontend/src/login/Login.js":"2","/mnt/c/Code/resume_builder/rb_frontend/src/util.js":"3","/mnt/c/Code/resume_builder/rb_frontend/src/ResumeBuilder.js":"4","/mnt/c/Code/resume_builder/rb_frontend/src/resumes/ResumePage.js":"5","/mnt/c/Code/resume_builder/rb_frontend/src/add-history/HistoryPage.js":"6","/mnt/c/Code/resume_builder/rb_frontend/src/add-history/components.js":"7","/mnt/c/Code/resume_builder/rb_frontend/src/Config.js":"8","/mnt/c/Code/resume_builder/rb_frontend/src/common/Section.js":"9","/mnt/c/Code/resume_builder/rb_frontend/src/common/Icons.js":"10","/mnt/c/Code/resume_builder/rb_frontend/src/resumes/templates/Zhong.js":"11","/mnt/c/Code/resume_builder/rb_frontend/src/common/DB.js":"12"},{"size":239,"mtime":1612419422303,"results":"13","hashOfConfig":"14"},{"size":6118,"mtime":1612723978855,"results":"15","hashOfConfig":"14"},{"size":1004,"mtime":1612428336101,"results":"16","hashOfConfig":"14"},{"size":6475,"mtime":1613398596967,"results":"17","hashOfConfig":"14"},{"size":14168,"mtime":1613411469618,"results":"18","hashOfConfig":"14"},{"size":47000,"mtime":1613398641784,"results":"19","hashOfConfig":"14"},{"size":7558,"mtime":1613398658629,"results":"20","hashOfConfig":"14"},{"size":97,"mtime":1613287670608,"results":"21","hashOfConfig":"14"},{"size":1237,"mtime":1612949290283,"results":"22","hashOfConfig":"14"},{"size":2820,"mtime":1613386005645,"results":"23","hashOfConfig":"14"},{"size":48321,"mtime":1613665456078,"results":"24","hashOfConfig":"14"},{"size":3856,"mtime":1613416411460,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"wo89w9",{"filePath":"29","messages":"30","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"56","usedDeprecatedRules":"28"},"/mnt/c/Code/resume_builder/rb_frontend/src/index.js",[],["57","58"],"/mnt/c/Code/resume_builder/rb_frontend/src/login/Login.js",["59","60","61","62"],"import React from 'react';\nimport $ from 'jquery';\nimport {storageAvailable , isValidEmail} from '../util'\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './login.css';\nimport '../main.css';\nimport {configs} from '../Config'\n\nexport default class LoginPage extends React.Component {\n    \n    constructor(props){\n        // @props: onLogin\n        super(props);\n        this.toggleSignup = this.toggleSignup.bind(this);\n        this.handleLogin = this.handleLogin.bind(this);\n        this.handleSignup = this.handleSignup.bind(this);\n\n        this.state = {\n            formError:\"\"\n        }\n        this.baseApiUrl = configs.apiHostUrl;\n    }\n\n    toggleSignup() {\n        $('#login-form form').animate({height: \"toggle\", opacity: \"toggle\"}, \"slow\");\n        this.setState({formError:\"\"});\n    }\n\n    handleLoginSuccessful(resp){\n        if(resp.status === 404){\n            this.setState({formError:\"Invalid credentials\"});\n            return;\n        }\n\n        if(resp.status === 400){\n            this.setState({formError:\"Provide both email and password\"});\n            return;\n        }\n        \n        if(!('token' in resp.data)){\n            this.setState({formError:\"Sorry, Something went wrong.\"});\n            return;\n\n        }\n\n        window.localStorage.setItem(\"rb_access_token\",resp.data.token);\n        this.setState({formError:\"\"});\n        this.props.onLogin();\n\n    }\n\n    handleLoginFailure(){\n        this.setState({formError:\"Sorry, Something went wrong.\"});\n    }\n\n    handleLogin(e){\n        e.preventDefault();\n\n        if(!isValidEmail(e.target.email.value)){\n            this.setState({formError:\"Invalid Email\"});\n            return;\n        }\n\n        const requestOpts = {\n            method  : \"POST\",\n            headers : { 'Content-Type': 'application/json' },\n            body    : JSON.stringify({ email: e.target.email.value, password: e.target.password.value })\n        };\n        \n\n        fetch(this.baseApiUrl+'users/login/',requestOpts)\n            .then(resp => resp.json()\n                .then(body => ({data:body, status:resp.status})))                \n            .then(data => this.handleLoginSuccessful(data), error => this.handleLoginFailure(error));\n    }\n\n    handleSignupSuccess(resp,e){\n        console.log(e);\n        if(resp.status === 406 ){\n            this.setState({formError: resp.data.msg})\n            return;\n        }\n        if(resp.status == 400){\n            this.setState({formError:\"Sorry, Something went wrong.\"});\n            return;\n        }\n\n        this.handleLogin(e);\n    }\n\n    handleSignup(e){\n        e.preventDefault();\n        \n        if(e.target.name.value === \"\"){\n            this.setState({formError:\"Please enter your full name.\"});\n            return;\n        }\n\n        if(!isValidEmail(e.target.email.value)){\n            this.setState({formError:\"Please enter a valid email address.\"});\n            return;\n        }\n\n        if(e.target.password.value === \"\" )\n        {\n            this.setState({formError:\"Password cannot be empty\"});\n            return;\n        }\n\n        if(e.target.password2.value === \"\" )\n        {\n            this.setState({formError:\"Confirm your password\"});\n            return;\n        }\n\n        if(e.target.password.value !== e.target.password2.value){\n            this.setState({formError:\"Passwords don't match.\"});\n            return;\n        }\n\n        const requestOpts = {\n            method  : \"POST\",\n            headers : { 'Content-Type': 'application/json' },\n            body    : JSON.stringify({ email: e.target.email.value, password: e.target.password.value, name: e.target.name.value})\n        };\n\n        this.setState({formError:\"\"});\n\n        fetch(this.baseApiUrl+'users/signup/',requestOpts)\n            .then(resp => resp.json()\n                .then(body => ({data:body, status:resp.status})))                \n            .then(data => this.handleSignupSuccess(data,e), error => this.setState({formError:\"Sorry, Something went wrong.\"}));\n\n    }\n\n\n    render(){\n        const content = (\n            <div id=\"login-content\">\n                <div className=\"container-fluid\">\n                    <div className=\"row\">\n                    </div>\n                </div>                \n            </div>\n        );\n\n        const login_singup = (\n            <div id=\"login-page\">\n                <div id=\"login-form\">\n                <form className=\"register-form\" onSubmit={this.handleSignup}>\n                    <input type=\"text\" name=\"name\" placeholder=\"Name\"/>\n                    <input type=\"text\" name=\"email\" placeholder=\"Email address\"/>\n                    <input type=\"password\" name=\"password\" placeholder=\"Password\"/>\n                    <input type=\"password\" name=\"password2\" placeholder=\"Confirm password\"/>\n                    <p className=\"error-msg\">{this.state.formError}</p>\n                    <button>Create</button>\n                    <p className=\"message\">Already registered? <a onClick={this.toggleSignup}>Sign In</a></p>\n                </form>\n                <form className=\"login-form\" onSubmit={this.handleLogin}>\n                    <input type=\"text\" name=\"email\" placeholder=\"Email\"/>\n                    <input type=\"password\" name=\"password\" placeholder=\"Password\"/>\n                    <p className=\"error-msg\">{this.state.formError}</p>\n                    <button type=\"submit\" >Login</button>\n                    <p className=\"message\">Not registered? <a onClick={this.toggleSignup}>Create an account</a></p>\n                </form>\n                </div>\n            </div>\n        );\n\n        const loginpage = (\n            <div className=\"container-fluid\">\n                <div className=\"row\">\n                    <div className=\"col-lg-5 col-md-6 nopadding\">\n                        <h1 id=\"app_name\">Resume Builder</h1>\n                        {login_singup}\n                    </div>\n                    <div className=\"col-lg-7 col-md-6 nopadding\">\n                        {content}\n                    </div>\n                </div>\n            </div>\n        );\n\n        return loginpage;\n    }    \n}\n","/mnt/c/Code/resume_builder/rb_frontend/src/util.js",[],"/mnt/c/Code/resume_builder/rb_frontend/src/ResumeBuilder.js",[],"/mnt/c/Code/resume_builder/rb_frontend/src/resumes/ResumePage.js",["63","64","65","66"],"import React from 'react';\nimport {Form,Modal,Button,Jumbotron} from 'react-bootstrap'\n\nimport {SectionBody} from '../common/Section'\n\nimport {TemplateZhong, Composer} from './templates/Zhong';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './resumepage.css';\nimport '../add-history/historypage.css';\n\nimport {} from 'react-bootstrap';\n\nimport {delete_icon,download,edit_icon,done_icon} from '../common/Icons';\nimport {DBEndpoint,globalCache} from '../common/DB'\n\n\nclass ConfirmModal extends React.Component {\n    // @prop: show : boolen\n    // @prop: message : text to display\n    // @prop: onCancel : call back on cancel\n    // @prop: onConfirm : call back on confirm\n    constructor(props){\n        super(props);\n    }\n    render(){\n        return (\n            <Modal show={this.props.show} onHide={()=>this.props.onCancel}>\n                <Modal.Header>\n                    <Modal.Title>{this.props.message}</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>Are you sure?</Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={this.props.onConfirm}>\n                        Confirm\n                    </Button>\n                    <Button variant=\"primary\" onClick={this.props.onCancel}>\n                        Cancel\n                    </Button>\n                    </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n\nclass ResumeItem extends React.Component {\n    // @props: onChange: callback for when a resume item changes:\n    //                 : Param: obj {id,title,job_profile_fk, profile_summary_fk}\n    constructor(props){\n        super(props);\n\n        this.state = {\n            id : props.id,\n            title : props.title,\n            job_profile_fk : props.job_profile_fk,\n            profile_summary_fk : props.profile_summary_fk,\n            jp_options : props.jp_options,\n            ps_options : props.ps_options,\n            show_delete_modal: false,\n        }\n\n        this.dispRef = React.createRef();\n        this.formRef = React.createRef();\n        \n        this.onEdit = this.onEdit.bind(this);\n        this.onSave = this.onSave.bind(this);\n        this.onDeleteCancel = this.onDeleteCancel.bind(this);\n        this.onDeleteConfirm = this.onDeleteConfirm.bind(this);\n\n        this.prevState = null;\n    }\n\n    onDeleteCancel(){\n        this.setState({show_delete_modal:false});\n    }\n    onDeleteConfirm(){\n        this.setState({show_delete_modal:false});\n        this.props.onDelete(this.state.id);\n    }\n\n    onEdit(){\n        this.dispRef.current.style.display='None';\n        this.formRef.current.style.display='';\n        this.prevState = { \n            id : this.state.id ,\n            title : this.state.title, \n            job_profile_fk : this.state.job_profile_fk,\n            profile_summary_fk : this.state.profile_summary_fk        \n        }\n    }\n\n    onSave(){\n        this.formRef.current.style.display='None'; \n        this.dispRef.current.style.display='';\n        for(var key in this.prevState){\n            if(this.state[key] !== this.prevState[key]){\n                this.props.onChange({\n                    id : this.state.id ,\n                    title : this.state.title, \n                    job_profile_fk : this.state.job_profile_fk,\n                    profile_summary_fk : this.state.profile_summary_fk\n                });\n                this.prevState = null;\n                return;\n            }\n        }\n\n    }\n\n    componentDidMount(){\n        this.formRef.current.style.display='None'; \n        this.dispRef.current.style.display='';\n    }\n\n\n    render(){\n        var main = (\n            <div className=\"row\" ref={this.dispRef}>\n                <div className=\"col-10 nopadding text-wrap\">\n                    <div className=\"section-content\">\n                        <div className=\"job-profile\">\n                            <div className=\"profile-name\">\n                                <span>{this.state.title}</span>\n                                <span onClick={this.onEdit}>{edit_icon}</span>\n                            </div>                            \n                        </div>\n                    </div>\n                </div>\n                <div className=\"col-2 nopadding\">\n                    <div className=\"delete-button\" onClick={()=>{this.setState({show_delete_modal:true})}}>\n                        {delete_icon}\n                    </div>\n\n                    <ConfirmModal \n                        message=\"Deleting Resume\" \n                        show={this.state.show_delete_modal} \n                        onCancel={this.onDeleteCancel} \n                        onConfirm={this.onDeleteConfirm}\n                    />\n                </div>\n            </div>\n        );\n        var form = (\n            <div className=\"row\" ref={this.formRef}>\n            <div className=\"col-10 nopadding text-wrap\">\n                <div className=\"section-content\">\n                    <div className=\"job-profile\">\n                        <div className=\"profile-name\">\n                            <span style={{width:\"60%\"}}>\n                                <input placeholder=\"Resume title\" \n                                        value={this.state.title} \n                                        onChange={(val)=>this.setState({title:val.target.value})}/>\n                            </span> \n                            <span onClick={this.onSave}>{done_icon}</span>\n                        </div>\n\n                        <Form.Group>\n                            <Form.Label>Job Profile</Form.Label>\n                            <Form.Control size=\"sm\" as=\"select\" \n                                defaultValue={this.state.job_profile_fk === null ? \"0\" : this.state.job_profile_fk}\n                                onChange={(e)=>{\n                                    this.setState({job_profile_fk: e.target.value === \"0\" ? null : e.target.value});\n                                }}>\n\n                                <option value=\"0\">None</option>\n                                {\n                                    this.state.jp_options.map(jp =>{\n                                        return <option value={jp['id']}>{jp['profile']}</option>\n                                    })\n                                }        \n                            </Form.Control>\n                        </Form.Group>\n\n                        <Form.Group>\n                            <Form.Label>Profile Summary</Form.Label>\n                            <Form.Control size=\"sm\" as=\"select\" \n                                defaultValue={this.state.profile_summary_fk === null ? \"0\" : this.state.profile_summary_fk} \n                                onChange={(e)=>{\n                                    this.setState({profile_summary_fk: e.target.value === \"0\" ? null : e.target.value});\n                                }}>\n                                \n                                <option value=\"0\">None</option>\n                                {\n                                    this.state.ps_options.map((ps)=>{\n                                        return <option value={ps['id']}>{ps.name}</option>\n                                    })\n                                }\n                            </Form.Control>\n                        </Form.Group>\n\n                    </div>\n                </div>\n            </div>\n        </div> \n        );\n        return <div key={this.state.id}>{main}{form}</div>;\n    }\n}\n\n\n\nclass ResumeControl extends React.Component {\n    // @props: onResumeSelect : callback when a resume is selected.\n    //   callback param: obj {id , title, job_profile_fk, profile_summary_fk }\n    constructor(props){\n        super(props);\n\n        this.state = {\n            resumes : {\n                // 1 : {title : \"Resume 1\", job_profile_fk: 2, profile_summary_fk:null}\n            },\n            selected_resume : 0 ,\n            job_profile_options : [],\n            profile_summary_options : []\n        }\n\n        this.onAdd = this.onAdd.bind(this);\n        this.onUpdate = this.onUpdate.bind(this);\n        this.onDelete = this.onDelete.bind(this);\n        this.onSelect = this.onSelect.bind(this);\n\n        this.dbResume = new DBEndpoint('coreapi/resumes/');\n        this.dbJobProfile = new DBEndpoint('coreapi/jobprofiles/');\n        this.dbProfSum = new DBEndpoint('coreapi/summaries/');\n    }\n\n    onAdd(){\n        var new_resume = {\n            title : \"New Resume\"\n        };\n        \n        this.dbResume.createOne(new_resume)\n            .then(data =>{\n                var _r = Object.assign({},this.state.resumes);\n                _r[data['id']] = new_resume;\n                this.setState({resumes:_r});\n            });\n    }\n\n    onUpdate(obj){\n        let id = obj['id'];\n        let obj_copy = Object.assign({},obj);\n        delete obj_copy['id'];\n        var _r = Object.assign({},this.state.resumes);\n        _r[id] = obj_copy;\n        this.dbResume.updateOne(id,obj_copy)\n            .then(()=>{\n                this.setState({resumes:_r})\n            });\n\n    }\n\n    onDelete(id){\n        var _r = Object.assign({},this.state.resumes);\n        delete _r[id];\n        this.dbResume.deleteOne(id)\n            .then(()=>{\n                this.setState({resumes:_r});\n            });\n\n        if(id === this.state.selected_resume){\n            this.setState({selected_resume:0});\n            this.props.onResumeSelect(null);\n        }\n    }\n\n    onSelect(id){\n        this.setState({selected_resume:id});\n        if(id != 0) {\n            this.props.onResumeSelect({\n                id : id,\n                ...this.state.resumes[id]\n            });\n        }\n        else {\n            this.props.onResumeSelect(null)\n        }\n    }\n\n    async loadData(){\n        let jp_opt = [];\n        let ps_opt = [];\n        let _resumes = {};\n\n        let data = await this.dbJobProfile.readAll();\n        for(let i of data){\n            jp_opt.push({id : i['id'], profile: i['profile']});\n        }\n        this.setState({job_profile_options:jp_opt});\n\n\n        data = await this.dbProfSum.readAll();\n        for(let i of data){\n            ps_opt.push({id : i['id'], name: i['name']})\n        }\n        this.setState({profile_summary_options:ps_opt});\n\n\n        data = await this.dbResume.readAll();\n        for(let i of data){\n            _resumes[i['id']] = {\n                title : i['title'],\n                job_profile_fk : i['job_profile_fk'],\n                profile_summary_fk: i['profile_summary_fk']\n            };\n        }\n        this.setState({resumes : _resumes});        \n\n\n    }\n\n    componentDidMount(){\n        this.loadData();\n    }\n\n    render(){\n        var main = (\n            <SectionBody heading=\"Resumes\" onAdd={this.onAdd}>\n            {\n                Object.keys(this.state.resumes).map((id,index)=>{\n                    return <ResumeItem \n                                key={id} \n                                id={id} \n                                onChange={this.onUpdate} \n                                onDelete={this.onDelete}\n                                jp_options={this.state.job_profile_options}\n                                ps_options={this.state.profile_summary_options}\n                                {...this.state.resumes[id]} \n                            />\n                })\n            }\n            \n            <div id=\"resume-selector\">\n                <Form.Group>\n                    <Form.Label>Select Resume</Form.Label>\n                    <div className=\"row\">\n                        <div className=\"col-10\">\n                            <Form.Control size=\"sm\" \n                                as=\"select\"\n                                defaultValue={this.state.selected_resume}\n                                onChange={(e)=>{this.onSelect(e.target.value)}}\n                            >\n\n                                <option value=\"0\">None</option>\n                                {\n                                     Object.keys(this.state.resumes).map((id,index)=>{\n                                        return <option value={id}>{this.state.resumes[id].title}</option>\n                                     })\n                                }\n                            </Form.Control>\n                        </div>\n                        <div className=\"col-2\">\n                            <span className=\"download-button\">{download}</span>\n                        </div>\n                    </div>\n                </Form.Group>\n            </div>\n\n            </SectionBody>\n        );\n\n        return main;\n    }\n}\n\n\nclass EmptyComposer extends React.Component {\n    render(){\n        return (\n            <div>\n                <Jumbotron>\n                    <h2>Resume composer is empty.</h2>\n                    <p>Select a resume to edit it.</p>\n                </Jumbotron>\n\n            </div>\n\n        )\n    }\n}\n\nexport default class ResumePage extends React.Component {\n    // @props: onNav : function : takes 'history' or 'resumes'\n    constructor(props){\n        super(props);\n        this.onResumeSelect = this.onResumeSelect.bind(this);\n        this.state = {\n            // {id , title, job_profile_fk, profile_summary_fk }\n            selected_resume: null\n        }\n    }\n\n    onResumeSelect(obj){\n        this.setState({selected_resume:obj})\n    }\n    componentDidMount(){\n        this.props.onNav('resumes');\n    }\n\n    render(){\n        var main = (\n            <div className=\"container-fluid\">\n                <div className=\"row\">\n                    <div className=\"col-lg-3 col-md-6\">\n                        <ResumeControl onResumeSelect={this.onResumeSelect}/>\n                    </div>\n                    <div className=\"col-lg-9 col-md-6\">\n                        <div id=\"resume-compose\">\n\n                            {this.state.selected_resume === null ? <EmptyComposer/> : <Composer key={this.state.selected_resume.id} resume={this.state.selected_resume}/>}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n\n        \n        return main;\n    }\n}","/mnt/c/Code/resume_builder/rb_frontend/src/add-history/HistoryPage.js",["67"],"import React from 'react';\nimport DatePicker from 'react-datepicker';\n\nimport 'react-datepicker/dist/react-datepicker.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './historypage.css';\n\nimport {\n    EditableDiv,CollasableDisplay,\n    getDisplayDate, parseToDate, splitTextToPara\n} from './components';\n\nimport {SectionBody} from '../common/Section';\nimport {DBEndpoint} from '../common/DB';\n\nimport {delete_icon,edit_icon,done_icon} from '../common/Icons';\n\nimport {configs} from '../Config';\n\n\n\n\nclass SkillSection extends React.Component{\n    constructor(props){\n        //@props: baseApiUrl : TODO: Add this\n        super(props);\n        \n        this.state = {\n            skills : {}\n        }\n\n\n        this.updateSkill = this.updateSkill.bind(this);\n        this.deleteSkill = this.deleteSkill.bind(this);\n        this.addSkill = this.addSkill.bind(this);\n\n        this.dbEndpoint = new DBEndpoint('coreapi/skills/');\n        \n    }\n\n    componentDidMount(){\n        this.dbEndpoint.readAll()\n            .then(data => {\n                var new_skills = {};\n                for(var i of data){\n                    new_skills[i['id']] = {name: i['name'], score: i['score']};\n                }\n                this.setState({skills:new_skills});\n            });\n    }\n    \n    updateSkill(id,key,value){\n        var skills_copy = Object.assign({},this.state.skills);\n        skills_copy[id][key] = value;\n\n        this.dbEndpoint.updateOne(id,skills_copy[id])\n            .then(()=>{\n                this.setState({skills:skills_copy});\n            });\n        \n    }\n    \n    deleteSkill(id){\n        var skills_copy = Object.assign({},this.state.skills);\n        delete skills_copy[id];\n\n        this.dbEndpoint.deleteOne(id)\n            .then(()=>{\n                this.setState({skills:skills_copy});\n            });\n    }\n\n    getSkillSection(skill_id){\n        // Returns a skill row\n        var skill_row = (\n            <div className=\"row\" key={skill_id}>\n                <div className=\"col-10 nopadding text-wrap\">\n                    <div className=\"section-content\">\n                        <div className=\"label\">\n                            <EditableDiv content={this.state.skills[skill_id].name} onUpdate={(value)=>this.updateSkill(skill_id,'name',value)}/>\n                        </div>\n                        <div className=\"value\">\n                            <EditableDiv content={this.state.skills[skill_id].score} onUpdate={(value)=>this.updateSkill(skill_id,'score',value)}/>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"col-2 nopadding\">\n                    <div className=\"delete-button\" onClick={()=>this.deleteSkill(skill_id)}>\n                        {delete_icon}\n                    </div>\n                </div>\n            </div>\n        );\n        return skill_row;\n    }\n\n    addSkill(){\n        var new_skill = {name:'Skill Name',score:1}\n        \n        this.dbEndpoint.createOne(new_skill)\n        .then(data => {\n                var skills_copy = Object.assign({},this.state.skills);\n                skills_copy[data['id']] = {name:data['name'], score:data['score']};\n                this.setState({skills:skills_copy});\n\n            });\n    }\n\n    render(){\n        var main = (\n            <SectionBody heading=\"Skills\" onAdd={this.addSkill}>                \n            { \n                Object.keys(this.state.skills).map((value,index)=>{\n                    return this.getSkillSection(value);\n                })\n            } \n            </SectionBody>\n\n        );\n        return main;\n    }\n\n}\n\nclass ContactSection extends React.Component{\n    constructor(props){\n        super(props);\n        \n        this.state ={\n            contacts : {}\n        }\n\n        this.dbEndpoint = new DBEndpoint('coreapi/contacts/');\n\n        this.updateContact = this.updateContact.bind(this);\n        this.addContact = this.addContact.bind(this);\n\n    }\n    componentDidMount(){\n        this.dbEndpoint.readAll()\n            .then((data)=>{\n                var new_contacts = {};\n                for(const i of data){\n                    new_contacts[i['id']] = {label:i['label'], value:i['value']}\n                }\n                this.setState({contacts:new_contacts});\n            });\n    }\n\n    updateContact(id,key,value){\n        var contacts_copy = Object.assign({},this.state.contacts);\n        contacts_copy[id][key] = value;\n        this.dbEndpoint.updateOne(id,contacts_copy[id])\n            .then(()=>{\n                this.setState({contacts:contacts_copy});\n            });\n\n    }\n    deleteContact(id){\n        var contacts_copy = Object.assign({},this.state.contacts);\n        delete contacts_copy[id];\n\n        this.dbEndpoint.deleteOne(id)\n            .then((resp) => {\n                this.setState({contacts:contacts_copy});\n            });\n    }\n\n    getContactRow(id){\n        var row = (\n            <div className=\"row\" key={id}>\n                <div className=\"col-10 nopadding text-wrap\">\n                    <div className=\"section-content\">\n                        <div className=\"label\">\n                            <EditableDiv content={this.state.contacts[id].label} onUpdate={(value)=>this.updateContact(id,'label',value)}/>\n                        </div>\n                        <div className=\"value\">\n                            <EditableDiv content={this.state.contacts[id].value} onUpdate={(value)=>this.updateContact(id,'value',value)}/>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"col-2 nopadding\">\n                    <div className=\"delete-button\" onClick={()=>this.deleteContact(id)}>\n                        {delete_icon}\n                    </div>\n                </div>\n            </div>\n        );\n        return row;\n         \n    }\n\n    addContact(){\n        var new_contact = { label:'Contact Label', value:'Contact Details'};\n\n        this.dbEndpoint.createOne(new_contact)\n            .then(data => {\n                var contacts_copy = Object.assign({},this.state.contacts);\n                contacts_copy[data['id']] = new_contact;\n                this.setState({contacts:contacts_copy});\n            });\n    }\n\n    render(){\n        var main = (\n            <SectionBody heading=\"Contacts\" onAdd={this.addContact}>\n            {\n                Object.keys(this.state.contacts).map((value,index)=>{\n                    return this.getContactRow(value);\n                })\n            }\n            </SectionBody>\n\n        );\n        return main;\n    }\n}\n\nclass JobProfile extends React.Component{\n    constructor(props){\n        // @props: id: Job profile id       \n        // @props: profile, company, location, start_time, end_time, is_current     \n        // @props: onUpdate: To be called when state updates. Need to pass the entire this.state as arg\n        // @props: onDelete: To be called when delete is pressed. Need to pass id as arg.\n        super(props);\n        this.state = {\n            id      : this.props.id,\n            profile : this.props.profile,\n            company : this.props.company,\n            location: this.props.location,\n            start_time: this.props.start_time,\n            end_time: this.props.end_time,\n            is_current: this.props.is_current            \n        }\n\n        this.dispRef = React.createRef();\n        this.formRef = React.createRef();\n\n        this.onEdit = this.onEdit.bind(this);\n        this.onSave = this.onSave.bind(this);\n\n        this.prevState = null;\n    }\n\n    componentDidMount(){\n        this.formRef.current.style.display='None'; \n        this.dispRef.current.style.display='';\n    }\n    onEdit(){\n        this.dispRef.current.style.display='None';\n        this.formRef.current.style.display='';\n        this.prevState = Object.assign({},this.state);        \n    }\n    onSave(){\n        this.formRef.current.style.display='None'; \n        this.dispRef.current.style.display='';\n\n        for(var key in this.prevState){\n            if(this.state[key] !== this.prevState[key]){\n                this.prevState = null;\n                this.props.onChange(this.state)\n                break;\n            }\n        }\n\n    }\n\n    render(){\n        var main = (\n            <div className=\"row\" ref={this.dispRef}>\n                <div className=\"col-10 nopadding text-wrap\">\n                    <div className=\"section-content\">\n                        <div className=\"job-profile\">\n                            <div className=\"profile-name\">\n                                <span>{this.state.profile}</span>\n                                <span onClick={this.onEdit}>{edit_icon}</span>\n                            </div>\n                            { this.state.company && <span className=\"company-name\">{this.state.company}</span>}\n                            { this.state.location && <span className=\"location\">{this.state.location}</span>}\n                            <div className=\"timeframe\">\n                                { this.state.start_time && <span className=\"start-time\">From: {getDisplayDate(this.state.start_time)}</span>}\n                                { this.state.end_time && <span className=\"end-time text-wrap\">To: {getDisplayDate(this.state.end_time)}</span>}\n                            </div>\n                            <div className=\"is-present\">\n                                {this.state.is_current===true && <span>Currently Work here</span>}\n                            </div>\n                            \n                        </div>\n                    </div>\n                </div>\n                <div className=\"col-2 nopadding\">\n                    <div className=\"delete-button\" onClick={()=>{this.props.onDelete(this.state.id)}}>\n                        {delete_icon}\n                    </div>\n                </div>\n            </div>\n        );\n\n        var form = (\n            <div className=\"row\" ref={this.formRef}>\n                <div className=\"col-10 nopadding text-wrap\">\n                    <div className=\"section-content\">\n                        <div className=\"job-profile\">\n                            <div className=\"profile-name\">\n                                <span>\n                                    <input placeholder=\"Job profile\" \n                                            value={this.state.profile} \n                                            onChange={(val)=>this.setState({profile:val.target.value})}/>\n                                </span> \n                                <span onClick={this.onSave}>{done_icon}</span>\n                            </div>\n                            \n                            <input className=\"company-name\" \n                                    placeholder=\"Company Name\" \n                                    value={this.state.company} \n                                    onChange={(val)=>this.setState({company:val.target.value})} />\n                            \n                            <input className=\"location\" \n                                    placeholder=\"Location\" \n                                    value={this.state.location}\n                                    onChange={(val)=>this.setState({location:val.target.value})}/>\n                            \n                            <div className=\"timeframe\">\n                                <div className=\"start-time\">\n                                    Start time: <DatePicker selected={this.state.start_time} onChange={(date)=>{this.setState({start_time:date})}}/>\n                                </div>\n                                <div className=\"end-time\">\n                                    End time: <DatePicker selected={this.state.end_time} onChange={(date)=>{this.setState({end_time:date})}}/>\n                                </div>\n                            </div>\n\n                            <div className=\"is-present\">\n                                <label className=\"form-check-label\" for=\"exampleCheck1\">Currently Work here?</label>\n                                <input type=\"checkbox\" \n                                        className=\"form-check-input\" \n                                        id=\"exampleCheck1\" \n                                        defaultChecked={this.state.is_current} \n                                        onChange={(e)=>this.setState({is_current:e.target.checked})}/>\n                            </div>\n                            \n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n\n        return <div key={this.state.id}>{main}{form}</div>\n    }\n}\n\nclass ExperienceSection extends React.Component{\n    constructor(props){\n        super(props);\n\n        this.state = {\n            xp : {}\n        }\n        this.onUpdate = this.onUpdate.bind(this);\n        this.onDelete = this.onDelete.bind(this);\n        this.onAdd = this.onAdd.bind(this);\n\n        this.dbEndpoint = new DBEndpoint('coreapi/jobprofiles/');\n\n        this.baseApiUrl = configs.apiHostUrl+'coreapi/';\n        this.authHeaders = { \n            'Content-Type':'application/json',\n            'Authorization': 'token '+window.localStorage.getItem('rb_access_token')\n        };\n    }\n\n    onUpdate(obj){\n        var xp_copy = Object.assign(this.state.xp);\n        xp_copy[obj.id] = {\n            profile : obj.profile,\n            company : obj.company, \n            location: obj.location,\n            start_time: obj.start_time,\n            end_time: obj.end_time,\n            is_current: obj.is_current\n        }\n\n        this.dbEndpoint.updateOne(obj.id, xp_copy[obj.id])\n            .then(data => {\n                this.setState({xp:xp_copy});\n\n            });\n\n    }\n\n    onDelete(id){\n        var xp_copy = Object.assign({},this.state.xp);\n        delete xp_copy[id];\n\n        this.dbEndpoint.deleteOne(id)\n            .then(data =>{\n                this.setState({xp:xp_copy});\n            });\n        \n    }\n\n    onAdd(){\n        var new_xp = {\n            profile : \"Job profile\",\n            company : null, \n            location: null,\n            start_time: null,\n            end_time: null,\n            is_current: false\n        }\n        this.dbEndpoint.createOne(new_xp)\n            .then((data)=>{\n                let id = data['id'];\n                var _d = Object.assign({},data);\n                // Deleting the id, because we are passing an id prop to JobProfile component and a xp obj,\n                // if both has id attribute it will be a problem\n                delete _d['id'];\n                var xp_copy = Object.assign({},this.state.xp);\n                xp_copy[id] = _d;\n                this.setState({xp:xp_copy});\n            });\n        \n    }\n\n    componentDidMount(){\n        this.dbEndpoint.readAll()\n            .then(data => {\n                let new_xp = {}\n                for(var i of data){\n                    new_xp[i.id] = {\n                        profile : i.profile,\n                        company : i.company, \n                        location: i.location,\n                        start_time: parseToDate(i.start_time),\n                        end_time: parseToDate(i.end_time),\n                        is_current: i.is_current\n                    }\n                }\n                this.setState({xp:new_xp});\n            });\n    }\n\n    render(){       \n        var main = (\n            <SectionBody heading=\"Experiences\" onAdd={this.onAdd}>\n            {\n                Object.keys(this.state.xp).map((id,index)=>{\n                    return <JobProfile key={id} id={id} {...this.state.xp[id]} onChange={this.onUpdate} onDelete={this.onDelete}/>\n                })\n            }\n            </SectionBody>\n\n        );\n        return main;\n    }\n\n}\n\n\nclass Eductaion extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            id : props.id,\n            degree: props.degree,\n            provider: props.provider,\n            start_time: props.start_time,\n            end_time: props.end_time,\n            is_current: props.is_current\n        }\n\n        this.dispRef = React.createRef();\n        this.formRef = React.createRef();\n        \n        this.onEdit = this.onEdit.bind(this);\n        this.onSave = this.onSave.bind(this);\n\n        this.prevState = null;\n\n    }\n\n    componentDidMount(){\n        this.formRef.current.style.display='None'; \n        this.dispRef.current.style.display='';\n    }\n\n    onEdit(){\n        this.dispRef.current.style.display='None';\n        this.formRef.current.style.display='';\n        this.prevState = Object.assign({},this.state);        \n    }\n    onSave(){\n        this.formRef.current.style.display='None'; \n        this.dispRef.current.style.display='';\n\n        for(var key in this.prevState){\n            if(this.state[key] !== this.prevState[key]){\n                this.props.onChange(this.state)\n                this.prevState = null;\n                return;\n            }\n        }\n\n    }\n\n    render(){\n        var main = (\n            <div className=\"row\" ref={this.dispRef}>\n                <div className=\"col-10 nopadding text-wrap\">\n                    <div className=\"section-content\">\n                        <div className=\"job-profile\">\n                            <div className=\"profile-name\">\n                                <span>{this.state.degree}</span>\n                                <span onClick={this.onEdit}>{edit_icon}</span>\n                            </div>\n                            { this.state.provider && <span className=\"company-name\">{this.state.provider}</span>}\n                            <div className=\"timeframe\">\n                                { this.state.start_time && <span className=\"start-time\">From: {getDisplayDate(this.state.start_time)}</span>}\n                                { this.state.end_time && <span className=\"end-time text-wrap\">To: {getDisplayDate(this.state.end_time)}</span>}\n                            </div>\n                            <div className=\"is-present\">\n                                {this.state.is_current===true && <span>Currently studing</span>}\n                            </div>\n                            \n                        </div>\n                    </div>\n                </div>\n                <div className=\"col-2 nopadding\">\n                    <div className=\"delete-button\" onClick={()=>{this.props.onDelete(this.state.id)}}>\n                        {delete_icon}\n                    </div>\n                </div>\n            </div>\n        );\n\n        var form = (\n            <div className=\"row\" ref={this.formRef}>\n                <div className=\"col-10 nopadding text-wrap\">\n                    <div className=\"section-content\">\n                        <div className=\"job-profile\">\n                            <div className=\"profile-name\">\n                                <span>\n                                    <input placeholder=\"Course name\" \n                                            value={this.state.degree} \n                                            onChange={(val)=>this.setState({degree:val.target.value})}/>\n                                </span> \n                                <span onClick={this.onSave}>{done_icon}</span>\n                            </div>\n                            \n                            <input className=\"company-name\" \n                                    placeholder=\"Univerisy/College\" \n                                    value={this.state.provider} \n                                    onChange={(val)=>this.setState({provider:val.target.value})} />\n                            \n                            <div className=\"timeframe\">\n                                <div className=\"start-time\">\n                                    Start time: <DatePicker selected={this.state.start_time} onChange={(date)=>{this.setState({start_time:date})}}/>\n                                </div>\n                                <div className=\"end-time\">\n                                    End time: <DatePicker selected={this.state.end_time} onChange={(date)=>{this.setState({end_time:date})}}/>\n                                </div>\n                            </div>\n\n                            <div className=\"is-present\">\n                                <label className=\"form-check-label\" for=\"exampleCheck1\">Studing here now?</label>\n                                <input type=\"checkbox\" \n                                        className=\"form-check-input\" \n                                        id=\"exampleCheck1\" \n                                        defaultChecked={this.state.is_current} \n                                        onChange={(e)=>this.setState({is_current:e.target.checked})}/>\n                            </div>\n                            \n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n        return <div key={this.state.id}>{main}{form}</div>;\n    }\n\n}\n\nclass EductaionSection extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            edu : {}\n        }\n\n        this.onUpdate = this.onUpdate.bind(this);\n        this.onDelete = this.onDelete.bind(this);\n        this.onAdd = this.onAdd.bind(this);\n\n        this.dbEndpoint = new DBEndpoint('coreapi/edus/');\n    }\n\n    onUpdate(obj){\n        var edu_copy = Object.assign(this.state.edu);\n        let id = obj['id'];\n        \n        let obj_copy = Object.assign({},obj);\n        delete obj_copy['id'];\n        edu_copy[id] = obj_copy;\n\n\n        this.dbEndpoint.updateOne(id,obj_copy)\n            .then(()=>{\n                this.setState({edu:edu_copy});\n            });\n\n    }\n\n    onDelete(id){\n        var edu_copy = Object.assign({},this.state.edu);\n        delete edu_copy[id];\n        this.dbEndpoint.deleteOne(id)\n            .then(data => {\n                this.setState({edu:edu_copy});\n            });\n    }\n\n    onAdd(){\n        var new_edu = {\n            degree: 'Name of degree',\n            provider: null,\n            start_time: null,\n            end_time: null,\n            is_current: false\n        }\n        this.dbEndpoint.createOne(new_edu)\n            .then((data)=>{\n                var new_id = data['id'];\n                delete data['id'];\n                var edu_copy = Object.assign({},this.state.edu);\n                edu_copy[new_id] = data;\n                this.setState({edu:edu_copy});\n            });\n    }\n\n    componentDidMount(){\n        this.dbEndpoint.readAll()\n            .then(data => {\n                    let new_edu = {};\n                    for(var i of data){\n                        let new_id = i['id'];\n                        delete i['id']; \n                        i['start_time'] = parseToDate(i['start_time']);\n                        i['end_time'] = parseToDate(i['end_time']);\n\n                        new_edu[new_id] = i;\n                    }\n\n                    this.setState({edu:new_edu});\n            });\n    }\n\n    render(){\n        var main = (\n            <SectionBody heading=\"Eductions\" onAdd={this.onAdd}>\n            {\n                Object.keys(this.state.edu).map((id,index)=>{\n                    return <Eductaion key={id} id={id} {...this.state.edu[id]} onChange={this.onUpdate} onDelete={this.onDelete}/>\n                })\n            }\n            </SectionBody>\n\n        );\n        return main;\n\n    }\n}\n\nclass ProfileSummary extends React.Component{\n    constructor(props){\n        super(props);\n\n        this.state = {\n            id: props.id,\n            name: props.name,\n            summary: props.summary\n        }\n\n        this.dispRef = React.createRef();\n        this.formRef = React.createRef();\n        \n        this.onEdit = this.onEdit.bind(this);\n        this.onSave = this.onSave.bind(this);\n\n        this.prevState = null;\n\n    }\n\n    componentDidMount(){\n        this.formRef.current.style.display='None'; \n        this.dispRef.current.style.display='';\n    }\n\n    onEdit(){\n        this.dispRef.current.style.display='None';\n        this.formRef.current.style.display='';\n        this.prevState = Object.assign({},this.state);        \n    }\n    onSave(){\n        this.formRef.current.style.display='None'; \n        this.dispRef.current.style.display='';\n\n        for(var key in this.prevState){\n            if(this.state[key] !== this.prevState[key]){\n                this.props.onChange(this.state)\n                this.prevState = null;\n                return;\n            }\n        }\n\n    }\n\n    render(){\n        var main = (\n            <div className=\"row\" ref={this.dispRef}>\n                <div className=\"col-10 nopadding text-wrap\">\n                    <div className=\"section-content\">\n                        <div className=\"job-profile\">\n                            <div className=\"profile-name\">\n                                <span>{this.state.name}</span>\n                                <span onClick={this.onEdit}>{edit_icon}</span>\n                            </div>\n                            { this.state.summary && <span >{splitTextToPara(this.state.summary)}</span>}\n                            \n                        </div>\n                    </div>\n                </div>\n                <div className=\"col-2 nopadding\">\n                    <div className=\"delete-button\" onClick={()=>{this.props.onDelete(this.state.id)}}>\n                        {delete_icon}\n                    </div>\n                </div>\n            </div>\n        );\n\n        var form = (\n            <div className=\"row\" ref={this.formRef}>\n                <div className=\"col-10 nopadding text-wrap\">\n                    <div className=\"section-content\">\n                        <div className=\"job-profile\">\n                            <div className=\"profile-name\">\n                                <span>\n                                    <input placeholder=\"Summary name\" \n                                            value={this.state.name} \n                                            onChange={(val)=>this.setState({name:val.target.value})}/>\n                                </span> \n                                <span onClick={this.onSave}>{done_icon}</span>\n                            </div>\n                            \n                            <span className=\"textarea-label\">Sumarry:</span>\n                            <textarea\n                                    placeholder=\"summary\" \n                                    value={this.state.summary} \n                                    onChange={(val)=>this.setState({summary:val.target.value})} />\n                            \n                            \n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n        return <div key={this.state.id}>{main}{form}</div>;\n    }   \n}\n\nclass ProfileSummarySection extends React.Component{\n    constructor(props){\n        super(props);\n\n        this.state = {\n            profSum : {}\n        }\n\n        this.onAdd = this.onAdd.bind(this);\n        this.onUpdate = this.onUpdate.bind(this);\n        this.onDelete = this.onDelete.bind(this);\n\n        this.dbEndpoint = new DBEndpoint('coreapi/summaries/');\n    }\n    onAdd(){\n        var new_ps = {name:\"Profile Summary\",summary:\"Edit this summary\"};        \n        this.dbEndpoint.createOne(new_ps)\n            .then((data)=>{\n                let id = data['id'];\n                delete data['id'];\n                var _ps = Object.assign({},this.state.profSum);\n                _ps[id] = data;\n                this.setState({profSum:_ps});\n            });\n\n    }\n    onUpdate(obj){\n        var _ps = Object.assign({},this.state.profSum);\n        var id = obj['id'];\n        var _obj = Object.assign({},obj);\n        delete _obj['id'];\n        _ps[id] = _obj;\n\n        this.dbEndpoint.updateOne(id,_obj)\n            .then(()=>{\n                this.setState({profSum:_ps});\n            });\n    }\n\n    onDelete(id){\n        var _ps = Object.assign({},this.state.profSum);\n        delete _ps[id];\n        this.dbEndpoint.deleteOne(id)\n            .then(()=>{\n                this.setState({profSum:_ps});\n            });\n    }\n\n    componentDidMount(){\n        this.dbEndpoint.readAll()\n            .then(data =>{\n                var new_ps = {}\n                for(var i of data){\n                    var id = i['id'];\n                    delete i['id'];\n                    new_ps[id] = i;\n                }\n\n                this.setState({profSum:new_ps});\n            });\n    }\n\n    render(){\n        var main = (\n\n            <SectionBody heading=\"Profile Summaries\" onAdd={this.onAdd}>\n            {\n                Object.keys(this.state.profSum).map((id,index)=>{\n                    return <ProfileSummary key={id} id={id} {...this.state.profSum[id]} onChange={this.onUpdate} onDelete={this.onDelete}/>\n                })\n            }\n            </SectionBody>\n\n        );\n        return main;\n    }\n}\n\nclass ProjectSummary extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            id : props.id,\n            project_fk: props.project_fk,\n            summary: props.summary\n        }\n        \n        this.dispRef = React.createRef();\n        this.formRef = React.createRef();\n\n        this.onEdit = this.onEdit.bind(this);\n        this.onSave = this.onSave.bind(this);\n\n        this.prevState = null;\n\n    }\n\n    componentDidMount(){\n        this.formRef.current.style.display='None'; \n        this.dispRef.current.style.display='';\n    }\n    onEdit(){\n        this.dispRef.current.style.display='None';\n        this.formRef.current.style.display='';\n        this.prevState = Object.assign({},this.state);        \n    }\n\n    onSave(){\n        this.formRef.current.style.display='None'; \n        this.dispRef.current.style.display='';\n\n        for(var key in this.prevState){\n            if(this.state[key] !== this.prevState[key]){\n                this.props.onChange({\n                    id      : this.state.id,\n                    project_fk: this.state.project_fk,\n                    summary: this.state.summary\n                });\n                this.prevState = null;\n                return;\n            }\n        }\n\n    }\n\n    render(){\n        var main = (\n            <div className=\"row\" ref={this.dispRef}>\n                <div className=\"col-10 nopadding text-wrap\">\n                    <div className=\"section-content\">\n                        <div className=\"job-profile\">\n                            <span className=\"summary-text\" onClick={this.onEdit}>{this.state.summary}</span>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"col-2 nopadding\">\n                    <div className=\"summary-buttons\">\n                        <span className=\"delete-button\" onClick={()=>this.props.onDelete(this.state.id)}>{delete_icon}</span>\n                    </div>\n                </div>\n            </div>\n        );\n\n        var form = (\n            <div className=\"row\" ref={this.formRef}>\n                <div className=\"col-10 nopadding text-wrap\">\n                    <div className=\"section-content\">\n                        <div className=\"job-profile\">\n                            <textarea \n                                placeholder=\"Specific keyword for the project\" \n                                value={this.state.summary} \n                                onChange={(val)=>this.setState({summary:val.target.value})}\n                                style={{height:'100pt', width:'100%', resize:'vertical'}}\n                                />\n                        </div>\n                    </div>\n                </div>\n                <div className=\"col-2 nopadding\">\n                    <div className=\"summary-buttons\">\n                        <span onClick={this.onSave}>{done_icon}</span>\n                    </div>\n                </div>\n            </div>\n        );\n        return <div>{main}{form}</div>;\n    }\n}\n\nclass Project extends React.Component{\n    // Project acts as 'section' for Project Summaries    \n    constructor(props){\n        super(props);\n        this.state = {\n            id : props.id,\n            title: props.title,\n            story: props.story,\n            keywords : props.keywords,\n\n            summaries : {}\n        }\n\n        this.dispRef = React.createRef();\n        this.formRef = React.createRef();\n        \n        this.onEdit = this.onEdit.bind(this);\n        this.onSave = this.onSave.bind(this);\n\n        this.onSummaryUpdate = this.onSummaryUpdate.bind(this);\n        this.onSummaryAdd = this.onSummaryAdd.bind(this);\n        this.onSummaryDelete = this.onSummaryDelete.bind(this);\n\n        this.prevState = null;\n\n        this.baseApiUrl = configs.apiHostUrl+'coreapi/';\n        this.authHeaders = { \n            'Content-Type':'application/json',\n            'Authorization': 'token '+window.localStorage.getItem('rb_access_token')\n        };\n    }\n\n    componentDidMount(){\n        this.formRef.current.style.display='None'; \n        this.dispRef.current.style.display='';\n        this.loadSummaries();\n    }\n\n    onEdit(){\n        this.dispRef.current.style.display='None';\n        this.formRef.current.style.display='';\n        this.prevState = {\n            id      : this.state.id,\n            title   : this.state.title,\n            story   : this.state.story,\n            keywords: this.state.keywords\n        };       \n    }\n\n    onSave(){\n        this.formRef.current.style.display='None'; \n        this.dispRef.current.style.display='';\n\n        for(var key in this.prevState){\n            if(this.state[key] !== this.prevState[key]){\n                this.props.onChange({\n                    id      : this.state.id,\n                    title   : this.state.title,\n                    story   : this.state.story,\n                    keywords: this.state.keywords\n                });\n                this.prevState = null;\n                return;\n            }\n        }\n\n    }\n    \n\n    getDispKeyword(str){\n        var keywords = str.split(\",\");\n        return (\n            <span>\n                {keywords.map(val=>{\n                    return <span className=\"keyword-item\">{val}</span>\n                })}\n            </span>\n        );\n    }\n\n\n    // All Summaries related stuff \n    async loadSummaries(){\n        let resp = await fetch(this.baseApiUrl+'projects/'+this.state.id+'/summaries/',{ headers: this.authHeaders,method:\"GET\"});\n        let data = await resp.json();\n\n        var summaries = {}\n        for(var i of data){\n            var id = i['id'];\n            delete i['id'];\n            summaries[id] = i;\n        }\n\n        this.setState({summaries:summaries});\n    }\n\n    async updateSummaryOnServer(id,obj){\n        let resp = await fetch(this.baseApiUrl+'projects/summaries/'+id+'/', { headers: this.authHeaders, method:\"PUT\", body:JSON.stringify(obj) });\n        let data = await resp.json();\n        return data;\n    }\n\n    async createSummaryOnServer(obj){\n        let resp = await fetch(this.baseApiUrl+'projects/'+this.state.id+'/summaries/', { headers: this.authHeaders, method:\"POST\", body:JSON.stringify(obj) });\n        let data = await resp.json();\n        return data;\n    }\n\n    onSummaryUpdate(obj){\n        var _summaries = Object.assign({},this.state.summaries);\n        var id = obj['id'];\n        var _obj = Object.assign({},obj);\n        delete _obj['id'];\n        _summaries[id] = _obj;\n\n        this.updateSummaryOnServer(id,_obj)\n            .then(()=>{\n                this.setState({summaries:_summaries});\n            });\n    }\n\n    onSummaryAdd(){\n        var new_project = {project_fk:this.state.id, summary:\"Tap me to edit this summary\"};\n\n        this.createSummaryOnServer(new_project)\n            .then((data)=>{\n                let id = data['id'];\n                delete data['id'];\n                var _s = Object.assign({},this.state.summaries);\n                _s[id] = data;\n                this.setState({summaries:_s});\n            });\n    }\n\n    onSummaryDelete(id){\n        var _s = Object.assign({},this.state.summaries);\n        delete _s[id];\n        fetch(this.baseApiUrl+'projects/summaries/'+id+'/', { headers: this.authHeaders, method:'DELETE'})\n            .then(resp => resp.json())\n            .then((data)=>{\n                this.setState({summaries:_s});\n                },(error) => {\n                    //TODO: Handle error here\n                }\n            );\n    }\n\n    render(){\n        var main = (\n            <div className=\"row\" ref={this.dispRef}>\n                <div className=\"col-10 nopadding text-wrap\">\n                    <div className=\"section-content\">\n                        <div className=\"job-profile\">\n                            <div className=\"profile-name\">\n                                <span>{this.state.title}</span>\n                                <span onClick={this.onEdit}>{edit_icon}</span>\n                            </div>\n                            <div className=\"keywords\">\n                                {   this.state.keywords && <span>{this.getDispKeyword(this.state.keywords)}</span> }\n                            </div>\n\n                            <CollasableDisplay name=\"Story\">\n                                { this.state.story && <span style={{fontStyle:'normal', fontSize:'10pt'}} className=\"company-name\">{splitTextToPara(this.state.story)}</span>}\n                            </CollasableDisplay>\n                            \n                            <br/>\n\n                            <CollasableDisplay name=\"Summaries\" onClickAdd={this.onSummaryAdd} expendedDefault >\n                            {\n                                Object.keys(this.state.summaries).map((id,index)=>{\n                                    return <ProjectSummary key={id} id={id} {...this.state.summaries[id]} onChange={this.onSummaryUpdate} onDelete={this.onSummaryDelete}/>\n                                })\n                            }\n                            </CollasableDisplay>                       \n                                    \n                        </div>\n                    </div>\n                </div>\n                <div className=\"col-2 nopadding\">\n                    <div className=\"delete-button\" onClick={()=>{this.props.onDelete(this.state.id)}}>\n                        {delete_icon}\n                    </div>\n                </div>\n            </div>\n        );\n\n        var form = (\n            <div className=\"row\" ref={this.formRef}>\n                <div className=\"col-10 nopadding text-wrap\">\n                    <div className=\"section-content\">\n                        <div className=\"job-profile\">\n                            <div className=\"profile-name\">\n                                <span>\n                                    <input placeholder=\"Project Title\" \n                                            value={this.state.title} \n                                            onChange={(val)=>this.setState({title:val.target.value})}/>\n                                </span> \n                                <span onClick={this.onSave}>{done_icon}</span>\n                            </div>\n\n                            <span className=\"textarea-label\">Keywords</span>\n                                <textarea className=\"\" \n                                        placeholder=\"Specific keyword for the project\" \n                                        value={this.state.keywords} \n                                        onChange={(val)=>this.setState({keywords:val.target.value})}\n                                        style={{height:'50pt'}}\n                                        />\n                            \n                            <span className=\"textarea-label\">Story</span>\n                            <textarea className=\"\" \n                                    placeholder=\"Write the story of the project.\" \n                                    value={this.state.story} \n                                    onChange={(val)=>this.setState({story:val.target.value})} />\n\n                            \n                            \n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n        return <div key={this.state.id}>{main}{form}</div>;\n    }\n}\n\nclass ProjectSection extends React.Component{\n    constructor(props){\n        super(props);\n\n        this.state ={\n            projects:{}\n        }\n        this.onAdd = this.onAdd.bind(this);\n        this.onUpdate = this.onUpdate.bind(this);\n        this.onDelete = this.onDelete.bind(this);\n\n        this.dbEndpoint = new DBEndpoint('coreapi/projects/');\n    }\n\n    onAdd(){\n        var new_project = {title:\"Project Title\",story:\"Add the story here\",keywords:\"coma,separated,keywords\"};\n\n        this.dbEndpoint.createOne(new_project)\n            .then((data)=>{\n                let id = data['id'];\n                delete data['id'];\n                var _prj = Object.assign({},this.state.projects);\n                _prj[id] = data;\n                this.setState({projects:_prj});\n            });\n    }\n    onUpdate(obj){\n        var _projects = Object.assign({},this.state.projects);\n        var id = obj['id'];\n        var _obj = Object.assign({},obj);\n        delete _obj['id'];\n        _projects[id] = _obj;\n\n        this.dbEndpoint.updateOne(id,_obj)\n            .then(()=>{\n                this.setState({projects:_projects});\n            });\n    }\n    onDelete(id){\n        var _p = Object.assign({},this.state.projects);\n        delete _p[id];\n\n        this.dbEndpoint.deleteOne(id)\n            .then(()=>{\n                this.setState({projects:_p});\n            });\n    }\n    componentDidMount(){\n        this.dbEndpoint.readAll()\n            .then(data => {\n\n                var projects = {}\n                for(var i of data){\n                    var id = i['id'];\n                    delete i['id'];\n                    projects[id] = i;\n                }\n        \n                this.setState({projects:projects});\n\n            });\n    }\n    render(){\n        var main = (\n            <SectionBody heading=\"Projects\" onAdd={this.onAdd}>\n                {\n                    Object.keys(this.state.projects).map((id,index)=>{\n                        return <Project key={id} id={id} {...this.state.projects[id]} onChange={this.onUpdate} onDelete={this.onDelete}/>\n                    })\n                }                \n            </SectionBody>\n\n        );\n        return main;\n    }\n}\n\nclass UserInfoSection extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            name : 'Name Lastname',\n        }\n\n        this.dispRef = React.createRef();\n        this.formRef = React.createRef();\n\n        this.prevState = null;\n\n        this.onSave = this.onSave.bind(this);\n        this.onEdit = this.onEdit.bind(this);\n\n        this.baseApiUrl = configs.apiHostUrl;\n        this.authHeaders = { \n            'Content-Type':'application/json',\n            'Authorization': 'token '+window.localStorage.getItem('rb_access_token')\n        };\n    }\n    componentDidMount(){\n        this.formRef.current.style.display='None'; \n        this.dispRef.current.style.display='';\n\n        fetch(this.baseApiUrl+'users/',{ headers: this.authHeaders,method:\"GET\" })\n            .then(resp => resp.json())\n            .then(data => {\n                this.setState({name:data['name']})\n            });\n    }\n\n    onEdit(){\n        this.dispRef.current.style.display='None';\n        this.formRef.current.style.display='';\n        this.prevState = Object.assign({},this.state);        \n    }\n    onSave(){\n        this.formRef.current.style.display='None'; \n        this.dispRef.current.style.display='';\n\n        for(var key in this.prevState){\n            if(this.state[key] !== this.prevState[key]){\n                fetch(this.baseApiUrl+'users/',{ headers: this.authHeaders,method:\"PUT\", body: JSON.stringify(this.state)})\n                    .then(resp => resp.json(), error => {});\n                this.prevState = null;\n                return;\n            }\n        }\n\n    }\n\n    render(){\n        var disp = (\n            <div className=\"row\" ref={this.dispRef}>\n                <div className=\"col-10 nopadding text-wrap\">\n                    <div className=\"section-content\">\n                        <div className=\"job-profile\">\n                            <div className=\"profile-name\">\n                                <span>{this.state.name}</span>\n                                <span onClick={this.onEdit}>{edit_icon}</span>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n        var form = (\n            <div className=\"row\" ref={this.formRef}>\n                <div className=\"col-10 nopadding text-wrap\">\n                    <div className=\"section-content\">\n                        <div className=\"job-profile\">\n                            <div className=\"profile-name\">\n                                <span>\n                                    <input placeholder=\"Name\" \n                                            value={this.state.name} \n                                            onChange={(val)=>this.setState({name:val.target.value})}/>\n                                </span> \n                                <span onClick={this.onSave}>{done_icon}</span>\n                            </div>                            \n                        </div>\n                    </div>\n                </div>\n            </div>);\n\n        var main =(\n            <SectionBody heading=\"User Info\">\n                {disp}{form}\n            </SectionBody>\n        );\n        return main;\n    }\n}\n\nexport default class HistoryPage extends React.Component {\n    constructor(props){\n        // @props: onNav : function : takes 'history' or 'resumes'\n        super(props);\n\n    }\n\n    componentDidMount(){\n        this.props.onNav('history');\n        // globalCache.insert(\"hp\",\"Hptesting\");\n        // console.log(globalCache);\n    }\n\n    render(){\n        var main = (\n            <div className=\"container-fluid\">\n                <div className=\"row\">\n                    <div className=\"col-lg-3 col-md-6\">\n                        <SkillSection/>\n                        <ContactSection/>\n                    </div>\n                    <div className=\"col-lg-6 col-md-6\">\n                        <ExperienceSection/>\n                        <ProjectSection/>\n                        <ProfileSummarySection/>\n                    </div>\n                    <div className=\"col-lg-3 col-md-6\">\n                        <EductaionSection/>\n                        <UserInfoSection/>\n                    </div>\n                </div>\n            </div>\n        )\n\n        \n        return main;\n    }\n}","/mnt/c/Code/resume_builder/rb_frontend/src/add-history/components.js",["68"],"import React from 'react';\n\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './historypage.css';\n\nexport let delete_icon = (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"black\" class=\"bi bi-trash-fill\" viewBox=\"0 0 16 16\">\n        <path d=\"M2.5 1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1H3v9a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V4h.5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1H2.5zm3 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5zM8 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5zm3 .5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 1 0z\"/>\n    </svg>\n);\n\nexport let add_icon = (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"black\" class=\"bi bi-plus-circle-fill\" viewBox=\"0 0 16 16\">\n        <path d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM8.5 4.5a.5.5 0 0 0-1 0v3h-3a.5.5 0 0 0 0 1h3v3a.5.5 0 0 0 1 0v-3h3a.5.5 0 0 0 0-1h-3v-3z\"/>\n    </svg>\n);\n\nexport let edit_icon = (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-pencil-fill\" viewBox=\"0 0 16 16\">\n        <path d=\"M12.854.146a.5.5 0 0 0-.707 0L10.5 1.793 14.207 5.5l1.647-1.646a.5.5 0 0 0 0-.708l-3-3zm.646 6.061L9.793 2.5 3.293 9H3.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.207l6.5-6.5zm-7.468 7.468A.5.5 0 0 1 6 13.5V13h-.5a.5.5 0 0 1-.5-.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.5-.5V10h-.5a.499.499 0 0 1-.175-.032l-.179.178a.5.5 0 0 0-.11.168l-2 5a.5.5 0 0 0 .65.65l5-2a.5.5 0 0 0 .168-.11l.178-.178z\"/>\n    </svg>\n);\n\nexport let done_icon = (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-check-circle-fill\" viewBox=\"0 0 16 16\">\n        <path d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z\"/>\n    </svg>\n);\n\nexport let downarrow =(\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-chevron-down\" viewBox=\"0 0 16 16\">\n    <path fill-rule=\"evenodd\" d=\"M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z\"/>\n    </svg>\n);\n\nexport let uparrow = (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-chevron-up\" viewBox=\"0 0 16 16\">\n    <path fill-rule=\"evenodd\" d=\"M7.646 4.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 5.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z\"/>\n    </svg>\n);\n\nexport class EditableDiv extends React.Component{\n    constructor({content,onUpdate,className,...rest}){\n        // @props: content: thing to display\n        // @props: onUpdate: function to be called when content is updated. Takes on argument\n        super(rest);\n        this.state = {\n            value : content,\n            placeholder : ''\n        }\n\n        this.inputRef = React.createRef();\n        this.divRef = React.createRef();\n\n        this.handleClick = this.handleClick.bind(this);\n        this.handleBlur = this.handleBlur.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount(){\n        this.inputRef.current.style.display = 'None';\n        if(this.state.value == '')\n            this.divRef.current.click();\n    }\n\n    handleClick(){\n        this.divRef.current.style.display = 'None';\n        this.inputRef.current.style.display = '';\n        this.inputRef.current.focus();\n    }\n    handleBlur(){\n        if(this.inputRef.current.value.length<1){\n            this.setState({placeholder:'Enter a value'});\n            this.inputRef.current.focus();\n            return;\n        }\n        this.divRef.current.style.display = '';\n        this.inputRef.current.style.display = 'None';\n        this.props.onUpdate(this.state.value);\n    }\n    handleChange(e){\n        this.setState({value : e.target.value});\n    }\n    render(){\n        return (\n            <div>\n                <div \n                    onClick={this.handleClick} \n                    ref={this.divRef}>\n                        {this.state.value}\n                </div>\n                <input \n                    onBlur={this.handleBlur} \n                    onChange={this.handleChange} \n                    ref={this.inputRef} \n                    placeholder={this.state.placeholder} \n                    value={this.state.value}\n                />\n            </div>\n        );\n    }\n}\n\nexport class CollasableDisplay extends React.Component{\n    constructor(props){\n        //@props: optional props: onClickAdd\n        //@props: optional: expendedDefault\n        super(props);\n\n        this.state = {\n            name : props.name,\n            is_expanded : this.props.expendedDefault ? true : false\n        }\n        this.handleToggle = this.handleToggle.bind(this);\n        this.contentRef = React.createRef();\n    }\n\n    componentDidMount(){\n        if(this.state.is_expanded)\n            this.contentRef.current.style.display = \"\";\n        else\n            this.contentRef.current.style.display = \"None\";\n        \n    }\n    handleToggle(){\n        this.setState({is_expanded: !this.state.is_expanded},()=>{\n            var disp = this.state.is_expanded ? '' : 'None';\n            this.contentRef.current.style.display = disp;\n        });\n    }\n\n    render(){\n        var main = (\n\n            <div className=\"collapsable\">\n                <div className=\"row\">\n                    <div className=\"col col-sm-6\">\n                        <div className=\"heading\">\n                            <span>{this.state.name}</span>\n                        </div>\n                    </div>\n                    <div className=\"col col-sm-3\">\n                        <span className=\"close-button\" onClick={this.handleToggle}>\n                            {this.state.is_expanded ? <span>{downarrow}</span> : <span>{uparrow}</span>}\n                        </span>\n\n                    </div>\n                    <div className=\"col col-sm-3\">\n                        { this.props.onClickAdd && <span onClick={this.props.onClickAdd} className=\"add-button\" style={{border:'None'}}>{add_icon}</span>}\n                    </div>\n                </div>\n            </div>\n\n        );\n        return (\n            <>\n            {main}\n            <div ref={this.contentRef}>\n                {this.props.children}\n            </div>\n            </>\n        );\n    }\n}\n\nexport function getDisplayDate(date){\n    // date is a Date object\n    // return string that looks like 'Jan 2019'\n    var mon = new Intl.DateTimeFormat('en',{ month: 'short'}).format(date);\n    var year = new Intl.DateTimeFormat('en',{ year: 'numeric' }).format(date);\n    return mon+' '+year;\n}\n\nexport function parseToDate(str){\n    // str is a date string recieved from the server\n    // in the format of YYYY-MM-DD\n    if(str === null)\n        return null;\n\n    var parts = str.split('-');\n    return new Date(parts[0], parts[1] - 1, parts[2]);\n\n}\n\nexport function splitTextToPara(str){\n    // 1 new line = <br>, 2 new line = new para\n\n    var list = str.split(\"\\n\\n\");\n    list = list.map((val)=>val.split(\"\\n\"));\n\n    return (\n        <span>\n        {\n            list.map(para=>{\n                return (\n                    <p>\n                    {\n                        para.map(line=>{\n                            return <span>{line}<br/></span>\n                        })\n                    }\n                    </p>\n                )\n            })\n        }\n        </span>\n    )\n\n}","/mnt/c/Code/resume_builder/rb_frontend/src/Config.js",[],"/mnt/c/Code/resume_builder/rb_frontend/src/common/Section.js",["69","70"],"import React from 'react';\n\nimport {add_icon} from './Icons';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './Section.css';\n\nexport class SectionBody extends React.Component{\n    //This is container-fluid, each child must be a bootstrp row\n    constructor(props){\n        super(props);\n    }\n\n    render(){\n        var main = (\n            <div className=\"section-body\">\n                <div className=\"container-fluid\">\n                    <div className=\"row\">\n                        <div className=\"col-10 nopadding\">\n                            <div className=\"section-body-header\">{this.props.heading}</div>\n                        </div>\n                        {this.props.onAdd && <div className=\"col-2 nopadding\">\n                            <div onClick={this.props.onAdd} className=\"add-button\">\n                                {add_icon}\n                            </div>\n                        </div>}\n                    </div>\n                    { this.props.children }\n                </div>\n            </div>\n\n        );\n        return main;\n    }\n}\n\nexport class SectionContent extends React.Component{\n    constructor(props){\n        super(props);\n    }\n\n    render(){\n        return<div></div>\n    }\n\n}","/mnt/c/Code/resume_builder/rb_frontend/src/common/Icons.js",[],"/mnt/c/Code/resume_builder/rb_frontend/src/resumes/templates/Zhong.js",["71","72","73","74"],"/mnt/c/Code/resume_builder/rb_frontend/src/common/DB.js",["75","76","77","78","79"],"import {configs} from '../Config';\n\nObject.unflatten = function(data) {\n    \"use strict\";\n    if (Object(data) !== data || Array.isArray(data))\n        return data;\n    var regex = /\\.?([^.\\[\\]]+)|\\[(\\d+)\\]/g,\n        resultholder = {};\n    for (var p in data) {\n        var cur = resultholder,\n            prop = \"\",\n            m;\n        while (m = regex.exec(p)) {\n            cur = cur[prop] || (cur[prop] = (m[2] ? [] : {}));\n            prop = m[2] || m[1];\n        }\n        cur[prop] = data[p];\n    }\n    return resultholder[\"\"] || resultholder;\n};\nObject.flatten = function(data) {\n    var result = {};\n    function recurse (cur, prop) {\n        if (Object(cur) !== cur) {\n            result[prop] = cur;\n        } else if (Array.isArray(cur)) {\n             for(var i=0, l=cur.length; i<l; i++)\n                 recurse(cur[i], prop + \"[\" + i + \"]\");\n            if (l == 0)\n                result[prop] = [];\n        } else {\n            var isEmpty = true;\n            for (var p in cur) {\n                isEmpty = false;\n                recurse(cur[p], prop ? prop+\".\"+p : p);\n            }\n            if (isEmpty && prop)\n                result[prop] = {};\n        }\n    }\n    recurse(data, \"\");\n    return result;\n}\n\nclass GlobalCache{\n    constructor(){\n        this.storage = {};\n\n        this.insert = this.insert.bind(this);\n        this.get = this.get.bind(this);\n        this.remove = this.remove.bind(this);\n        this.clear = this.clear.bind(this);\n    }\n    insert(key,obj){\n        this.storage[key] = Object.flatten(obj);\n    }\n    get(key){\n        if(! key in this.storage){\n            return null;\n        }\n        \n        return Object.unflatten(this.storage[key]);\n    }\n    remove(key){\n        if(key in this.storage)\n            delete this.storage[key];\n    }   \n    clear(){\n        for(var key in Object.keys(this.storage)){\n            delete this.storage[key];\n        }\n    }\n    isPresent(key){\n        return key in this.storage;\n    }\n    \n}\n\nexport var globalCache = new GlobalCache();\n\n\nexport class DBEndpoint{\n    constructor(apiUrl){\n        \n        this.authHeaders = { \n            'Content-Type':'application/json',\n            'Authorization': 'token ' + window.localStorage.getItem('rb_access_token')\n        };\n\n        this.apiUrl = configs.apiHostUrl + apiUrl;\n\n        this.filter = null;\n    }\n    addFilter(filter){\n        this.filter = {};\n        // filter is a dict with key value pairs, that will be converted into param\n        for(var key of Object.keys(filter)){\n            this.filter[key] = filter[key]\n        }\n        return this;\n    }\n    \n    async createOne(dbObj){\n        \n        let resp = await fetch(this.apiUrl, { headers: this.authHeaders, method:\"POST\", body:JSON.stringify(dbObj) });\n        let data = await resp.json();\n        return data;\n    }\n    async readAll(){\n        // Return list of objs from db\n        \n        var url = new URL(this.apiUrl);\n        if(this.filter !== null){\n            for(var key of Object.keys(this.filter)){\n                url.searchParams.set(key,this.filter[key]);\n            }\n        }\n        let resp = await fetch(url,{ headers: this.authHeaders,method:\"GET\"});\n        this.filter = null;\n        let data = await resp.json();\n        return data;\n    }\n    async readOne(id){\n        let resp = await fetch(this.apiUrl + id + '/',{ headers: this.authHeaders,method:\"GET\"});\n        let data = await resp.json();\n        return data;\n    }\n    async updateOne(id,dbObj){\n        let resp = await fetch(this.apiUrl + id + '/', { headers: this.authHeaders, method:\"PUT\", body:JSON.stringify(dbObj) });\n        return await resp.json();\n    }\n    async deleteOne(id){\n        let resp = await fetch(this.apiUrl + id + '/', { headers: this.authHeaders, method:\"DELETE\" });\n        return await resp.json();\n    }\n}\n\n",{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","severity":1,"message":"85","line":3,"column":9,"nodeType":"86","messageId":"87","endLine":3,"endColumn":25},{"ruleId":"88","severity":1,"message":"89","line":84,"column":24,"nodeType":"90","messageId":"91","endLine":84,"endColumn":26},{"ruleId":"92","severity":1,"message":"93","line":158,"column":64,"nodeType":"94","endLine":158,"endColumn":95},{"ruleId":"92","severity":1,"message":"93","line":165,"column":60,"nodeType":"94","endLine":165,"endColumn":91},{"ruleId":"84","severity":1,"message":"95","line":6,"column":9,"nodeType":"86","messageId":"87","endLine":6,"endColumn":22},{"ruleId":"84","severity":1,"message":"96","line":15,"column":20,"nodeType":"86","messageId":"87","endLine":15,"endColumn":31},{"ruleId":"97","severity":1,"message":"98","line":23,"column":5,"nodeType":"99","messageId":"100","endLine":25,"endColumn":6},{"ruleId":"88","severity":1,"message":"101","line":269,"column":15,"nodeType":"90","messageId":"91","endLine":269,"endColumn":17},{"ruleId":"97","severity":1,"message":"98","line":1334,"column":5,"nodeType":"99","messageId":"100","endLine":1338,"endColumn":6},{"ruleId":"88","severity":1,"message":"89","line":62,"column":29,"nodeType":"90","messageId":"91","endLine":62,"endColumn":31},{"ruleId":"97","severity":1,"message":"98","line":10,"column":5,"nodeType":"99","messageId":"100","endLine":12,"endColumn":6},{"ruleId":"97","severity":1,"message":"98","line":38,"column":5,"nodeType":"99","messageId":"100","endLine":40,"endColumn":6},{"ruleId":"84","severity":1,"message":"102","line":8,"column":51,"nodeType":"86","messageId":"87","endLine":8,"endColumn":60},{"ruleId":"84","severity":1,"message":"103","line":9,"column":10,"nodeType":"86","messageId":"87","endLine":9,"endColumn":13},{"ruleId":"84","severity":1,"message":"104","line":9,"column":15,"nodeType":"86","messageId":"87","endLine":9,"endColumn":21},{"ruleId":"105","severity":1,"message":"106","line":223,"column":47,"nodeType":"107","endLine":223,"endColumn":54},{"ruleId":"108","severity":1,"message":"109","line":4,"column":5,"nodeType":"110","messageId":"111","endLine":4,"endColumn":18,"fix":"112"},{"ruleId":"113","severity":1,"message":"114","line":7,"column":25,"nodeType":"115","messageId":"116","endLine":7,"endColumn":26,"suggestions":"117"},{"ruleId":"118","severity":1,"message":"119","line":13,"column":16,"nodeType":"120","messageId":"121","endLine":13,"endColumn":33},{"ruleId":"88","severity":1,"message":"89","line":29,"column":19,"nodeType":"90","messageId":"91","endLine":29,"endColumn":21},{"ruleId":"82","severity":1,"message":"122","line":58,"column":12,"nodeType":"90","messageId":"123","endLine":58,"endColumn":33},"no-native-reassign",["124"],"no-negated-in-lhs",["125"],"no-unused-vars","'storageAvailable' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'TemplateZhong' is defined but never used.","'globalCache' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","Expected '!==' and instead saw '!='.","'downarrow' is defined but never used.","'map' is defined but never used.","'timers' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","strict","'use strict' is unnecessary inside of modules.","ExpressionStatement","module",{"range":"126","text":"127"},"no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["128","129"],"no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","The 'in' expression's left operand is negated.","negatedLHS","no-global-assign","no-unsafe-negation",[76,89],"",{"messageId":"130","fix":"131","desc":"132"},{"messageId":"133","fix":"134","desc":"135"},"removeEscape",{"range":"136","text":"127"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"137","text":"138"},"Replace the `\\` with `\\\\` to include the actual backslash character.",[189,190],[189,189],"\\"]