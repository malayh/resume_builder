[{"/mnt/c/Code/resume_builder/rb_frontend/src/index.js":"1","/mnt/c/Code/resume_builder/rb_frontend/src/login/Login.js":"2","/mnt/c/Code/resume_builder/rb_frontend/src/util.js":"3","/mnt/c/Code/resume_builder/rb_frontend/src/ResumeBuilder.js":"4"},{"size":278,"mtime":1612349815071,"results":"5","hashOfConfig":"6"},{"size":6035,"mtime":1612350112785,"results":"7","hashOfConfig":"6"},{"size":996,"mtime":1612339480833,"results":"8","hashOfConfig":"6"},{"size":2050,"mtime":1612374947445,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12","usedDeprecatedRules":"13"},"wo89w9",{"filePath":"14","messages":"15","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16","usedDeprecatedRules":"13"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/mnt/c/Code/resume_builder/rb_frontend/src/index.js",["21"],"import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport LoginPage from './login/Login';\nimport ResumeBuilder from './ResumeBuilder';\n\nReactDOM.render(\n    <React.StrictMode>\n        <ResumeBuilder/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n  ",["22","23"],"/mnt/c/Code/resume_builder/rb_frontend/src/login/Login.js",["24","25","26","27"],"import React from 'react';\nimport $ from 'jquery';\nimport {storageAvailable , isValidEmail} from '../util'\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './login.css';\nimport '../main.css'\n\nexport default class LoginPage extends React.Component {\n    \n    constructor(props){\n        super(props);\n        this.toggleSignup = this.toggleSignup.bind(this);\n        this.handleLogin = this.handleLogin.bind(this);\n        this.handleSignup = this.handleSignup.bind(this);\n\n        this.state = {\n            formError:\"\"\n        }\n        this.baseUrl = \"http://localhost:8000/\";\n    }\n\n    toggleSignup() {\n        $('#login-form form').animate({height: \"toggle\", opacity: \"toggle\"}, \"slow\");\n        this.setState({formError:\"\"});\n    }\n\n    handleLoginSuccessful(resp){\n        if(resp.status === 404){\n            this.setState({formError:\"Invalid credentials\"});\n            return;\n        }\n\n        if(resp.status === 400){\n            this.setState({formError:\"Provide both email and password\"});\n            return;\n        }\n        \n        if(!('token' in resp.data)){\n            this.setState({formError:\"Sorry, Something went wrong.\"});\n            return;\n\n        }\n\n        window.localStorage.setItem(\"rb_access_token\",resp.data.token);\n        this.setState({formError:\"\"});\n\n    }\n\n    handleLoginFailure(){\n        this.setState({formError:\"Sorry, Something went wrong.\"});\n    }\n\n    handleLogin(e){\n        e.preventDefault();\n\n        if(!isValidEmail(e.target.email.value)){\n            this.setState({formError:\"Invalid Email\"});\n            return;\n        }\n\n        const requestOpts = {\n            method  : \"POST\",\n            headers : { 'Content-Type': 'application/json' },\n            body    : JSON.stringify({ email: e.target.email.value, password: e.target.password.value })\n        };\n        \n\n        fetch(this.baseUrl+'users/login/',requestOpts)\n            .then(resp => resp.json()\n                .then(body => ({data:body, status:resp.status})))                \n            .then(data => this.handleLoginSuccessful(data), error => this.handleLoginFailure(error));\n    }\n\n    handleSignupSuccess(resp){\n        if(resp.status === 406 ){\n            this.setState({formError: resp.data.msg})\n            return;\n        }\n        if(resp.status == 400){\n            this.setState({formError:\"Sorry, Something went wrong.\"});\n            return;\n        }\n\n        // TODO: login if signup is successful\n    }\n\n    handleSignup(e){\n        e.preventDefault();\n        \n        if(e.target.name.value === \"\"){\n            this.setState({formError:\"Please enter your full name.\"});\n            return;\n        }\n\n        if(!isValidEmail(e.target.email.value)){\n            this.setState({formError:\"Please enter a valid email address.\"});\n            return;\n        }\n\n        if(e.target.password1.value === \"\" )\n        {\n            this.setState({formError:\"Password cannot be empty\"});\n            return;\n        }\n\n        if(e.target.password2.value === \"\" )\n        {\n            this.setState({formError:\"Confirm your password\"});\n            return;\n        }\n\n        if(e.target.password1.value !== e.target.password2.value){\n            this.setState({formError:\"Passwords don't match.\"});\n            return;\n        }\n\n        const requestOpts = {\n            method  : \"POST\",\n            headers : { 'Content-Type': 'application/json' },\n            body    : JSON.stringify({ email: e.target.email.value, password: e.target.password1.value, name: e.target.name.value})\n        };\n\n        this.setState({formError:\"\"});\n\n        fetch(this.baseUrl+'users/signup/',requestOpts)\n            .then(resp => resp.json()\n                .then(body => ({data:body, status:resp.status})))                \n            .then(data => this.handleSignupSuccess(data), error => this.setState({formError:\"Sorry, Something went wrong.\"}));\n\n    }\n\n\n    render(){\n        const content = (\n            <div id=\"login-content\">\n                <div className=\"container-fluid\">\n                    <div className=\"row\">\n                    </div>\n                </div>                \n            </div>\n        );\n\n        const login_singup = (\n            <div id=\"login-page\">\n                <div id=\"login-form\">\n                <form className=\"register-form\" onSubmit={this.handleSignup}>\n                    <input type=\"text\" name=\"name\" placeholder=\"Name\"/>\n                    <input type=\"text\" name=\"email\" placeholder=\"Email address\"/>\n                    <input type=\"password\" name=\"password1\" placeholder=\"Password\"/>\n                    <input type=\"password\" name=\"password2\" placeholder=\"Confirm password\"/>\n                    <p className=\"error-msg\">{this.state.formError}</p>\n                    <button>Create</button>\n                    <p className=\"message\">Already registered? <a href=\"#\" onClick={this.toggleSignup}>Sign In</a></p>\n                </form>\n                <form className=\"login-form\" onSubmit={this.handleLogin}>\n                    <input type=\"text\" name=\"email\" placeholder=\"Email\"/>\n                    <input type=\"password\" name=\"password\" placeholder=\"Password\"/>\n                    <p className=\"error-msg\">{this.state.formError}</p>\n                    <button type=\"submit\" >Login</button>\n                    <p className=\"message\">Not registered? <a href=\"#\" onClick={this.toggleSignup}>Create an account</a></p>\n                </form>\n                </div>\n            </div>\n        );\n\n        const loginpage = (\n            <div className=\"container-fluid\">\n                <div className=\"row\">\n                    <div className=\"col-lg-5 col-md-6 nopadding\">\n                        <h1 id=\"app_name\">Resume Builder</h1>\n                        {login_singup}\n                    </div>\n                    <div className=\"col-lg-7 col-md-6 nopadding\">\n                        {content}\n                    </div>\n                </div>\n            </div>\n        );\n\n        return loginpage;\n    }    \n}\n","/mnt/c/Code/resume_builder/rb_frontend/src/util.js",[],"/mnt/c/Code/resume_builder/rb_frontend/src/ResumeBuilder.js",["28","29","30","31","32"],{"ruleId":"33","severity":1,"message":"34","line":4,"column":8,"nodeType":"35","messageId":"36","endLine":4,"endColumn":17},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"33","severity":1,"message":"41","line":3,"column":9,"nodeType":"35","messageId":"36","endLine":3,"endColumn":25},{"ruleId":"42","severity":1,"message":"43","line":80,"column":24,"nodeType":"44","messageId":"45","endLine":80,"endColumn":26},{"ruleId":"46","severity":1,"message":"47","line":154,"column":64,"nodeType":"48","endLine":154,"endColumn":104},{"ruleId":"46","severity":1,"message":"47","line":161,"column":60,"nodeType":"48","endLine":161,"endColumn":100},{"ruleId":"33","severity":1,"message":"49","line":6,"column":17,"nodeType":"35","messageId":"36","endLine":6,"endColumn":20},{"ruleId":"33","severity":1,"message":"50","line":6,"column":33,"nodeType":"35","messageId":"36","endLine":6,"endColumn":37},{"ruleId":"33","severity":1,"message":"51","line":6,"column":38,"nodeType":"35","messageId":"36","endLine":6,"endColumn":49},{"ruleId":"33","severity":1,"message":"52","line":6,"column":50,"nodeType":"35","messageId":"36","endLine":6,"endColumn":56},{"ruleId":"53","severity":1,"message":"54","line":46,"column":5,"nodeType":"55","messageId":"56","endLine":48,"endColumn":6},"no-unused-vars","'LoginPage' is defined but never used.","Identifier","unusedVar","no-native-reassign",["57"],"no-negated-in-lhs",["58"],"'storageAvailable' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Nav' is defined but never used.","'Form' is defined but never used.","'FormControl' is defined but never used.","'Button' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-global-assign","no-unsafe-negation"]